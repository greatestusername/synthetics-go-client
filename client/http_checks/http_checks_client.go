// Code generated by go-swagger; DO NOT EDIT.

package http_checks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new http checks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for http checks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateHTTPCheck(params *CreateHTTPCheckParams, opts ...ClientOption) (*CreateHTTPCheckOK, error)

	DeleteHTTPCheck(params *DeleteHTTPCheckParams, opts ...ClientOption) (*DeleteHTTPCheckOK, error)

	GetHTTPCheck(params *GetHTTPCheckParams, opts ...ClientOption) (*GetHTTPCheckOK, error)

	UpdateHTTPCheck(params *UpdateHTTPCheckParams, opts ...ClientOption) (*UpdateHTTPCheckOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateHTTPCheck creates a new HTTP check

  Returns the new HTTP check
*/
func (a *Client) CreateHTTPCheck(params *CreateHTTPCheckParams, opts ...ClientOption) (*CreateHTTPCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHTTPCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createHttpCheck",
		Method:             "POST",
		PathPattern:        "/v2/checks/http",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateHTTPCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateHTTPCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createHttpCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteHTTPCheck deletes an HTTP check

  <b style="color:red">Warning: This operation will delete the check
              and all of its run histories. You cannot undo this action!</b>
*/
func (a *Client) DeleteHTTPCheck(params *DeleteHTTPCheckParams, opts ...ClientOption) (*DeleteHTTPCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHTTPCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteHttpCheck",
		Method:             "DELETE",
		PathPattern:        "/v2/checks/http/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHTTPCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHTTPCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteHttpCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetHTTPCheck gets HTTP check detail

  Returns an HTTP check based on a single ID
*/
func (a *Client) GetHTTPCheck(params *GetHTTPCheckParams, opts ...ClientOption) (*GetHTTPCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHTTPCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHTTPCheck",
		Method:             "GET",
		PathPattern:        "/v2/checks/http/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHTTPCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHTTPCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHTTPCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateHTTPCheck updates an HTTP check

  Returns the updated HTTP check
*/
func (a *Client) UpdateHTTPCheck(params *UpdateHTTPCheckParams, opts ...ClientOption) (*UpdateHTTPCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHTTPCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateHttpCheck",
		Method:             "PUT",
		PathPattern:        "/v2/checks/http/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHTTPCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateHTTPCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateHttpCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
