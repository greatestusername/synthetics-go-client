// Code generated by go-swagger; DO NOT EDIT.

package comparison_reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteComparisonReportReader is a Reader for the DeleteComparisonReport structure.
type DeleteComparisonReportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteComparisonReportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteComparisonReportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteComparisonReportOK creates a DeleteComparisonReportOK with default headers values
func NewDeleteComparisonReportOK() *DeleteComparisonReportOK {
	var (
		// initialize headers with default values
		xRateLimitLimitDefault = int64("5000")

		xRateLimitResetDefault = int64("1621968845")
	)

	return &DeleteComparisonReportOK{

		XRateLimitLimit: xRateLimitLimitDefault,
		XRateLimitReset: xRateLimitResetDefault,
	}
}

/* DeleteComparisonReportOK describes a response with status code 200, with default header values.

Generic success response
*/
type DeleteComparisonReportOK struct {

	/* The number of requests a user is allowed per hour. Users are identified by IP address.

	   Default: "5000"
	*/
	XRateLimitLimit int64

	/* The number of requests remaining in the current rate limit window
	 */
	XRateLimitRemaining int64

	/* When the current rate limit window resets (in UTC epoch seconds).

	   Default: "1621968845"
	*/
	XRateLimitReset int64

	Payload *DeleteComparisonReportOKBody
}

func (o *DeleteComparisonReportOK) Error() string {
	return fmt.Sprintf("[DELETE /v2/comparison_reports/{id}][%d] deleteComparisonReportOK  %+v", 200, o.Payload)
}
func (o *DeleteComparisonReportOK) GetPayload() *DeleteComparisonReportOKBody {
	return o.Payload
}

func (o *DeleteComparisonReportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-Reset
	hdrXRateLimitReset := response.GetHeader("X-RateLimit-Reset")

	if hdrXRateLimitReset != "" {
		valxRateLimitReset, err := swag.ConvertInt64(hdrXRateLimitReset)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Reset", "header", "int64", hdrXRateLimitReset)
		}
		o.XRateLimitReset = valxRateLimitReset
	}

	o.Payload = new(DeleteComparisonReportOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*DeleteComparisonReportOKBody A success message
swagger:model DeleteComparisonReportOKBody
*/
type DeleteComparisonReportOKBody struct {

	// A collection of error messages
	Errors []*DeleteComparisonReportOKBodyErrorsItems0 `json:"errors"`

	// A high-level status message
	Message string `json:"message,omitempty"`

	// result
	// Enum: [success error]
	Result string `json:"result,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *DeleteComparisonReportOKBody) UnmarshalJSON(raw []byte) error {
	// DeleteComparisonReportOKBodyAO0
	var dataDeleteComparisonReportOKBodyAO0 struct {
		Errors []*DeleteComparisonReportOKBodyErrorsItems0 `json:"errors"`

		Message string `json:"message,omitempty"`

		Result string `json:"result,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataDeleteComparisonReportOKBodyAO0); err != nil {
		return err
	}

	o.Errors = dataDeleteComparisonReportOKBodyAO0.Errors

	o.Message = dataDeleteComparisonReportOKBodyAO0.Message

	o.Result = dataDeleteComparisonReportOKBodyAO0.Result

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o DeleteComparisonReportOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataDeleteComparisonReportOKBodyAO0 struct {
		Errors []*DeleteComparisonReportOKBodyErrorsItems0 `json:"errors"`

		Message string `json:"message,omitempty"`

		Result string `json:"result,omitempty"`
	}

	dataDeleteComparisonReportOKBodyAO0.Errors = o.Errors

	dataDeleteComparisonReportOKBodyAO0.Message = o.Message

	dataDeleteComparisonReportOKBodyAO0.Result = o.Result

	jsonDataDeleteComparisonReportOKBodyAO0, errDeleteComparisonReportOKBodyAO0 := swag.WriteJSON(dataDeleteComparisonReportOKBodyAO0)
	if errDeleteComparisonReportOKBodyAO0 != nil {
		return nil, errDeleteComparisonReportOKBodyAO0
	}
	_parts = append(_parts, jsonDataDeleteComparisonReportOKBodyAO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this delete comparison report o k body
func (o *DeleteComparisonReportOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteComparisonReportOKBody) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(o.Errors) { // not required
		return nil
	}

	for i := 0; i < len(o.Errors); i++ {
		if swag.IsZero(o.Errors[i]) { // not required
			continue
		}

		if o.Errors[i] != nil {
			if err := o.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteComparisonReportOK" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var deleteComparisonReportOKBodyTypeResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deleteComparisonReportOKBodyTypeResultPropEnum = append(deleteComparisonReportOKBodyTypeResultPropEnum, v)
	}
}

// property enum
func (o *DeleteComparisonReportOKBody) validateResultEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deleteComparisonReportOKBodyTypeResultPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *DeleteComparisonReportOKBody) validateResult(formats strfmt.Registry) error {

	if swag.IsZero(o.Result) { // not required
		return nil
	}

	// value enum
	if err := o.validateResultEnum("deleteComparisonReportOK"+"."+"result", "body", o.Result); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this delete comparison report o k body based on the context it is used
func (o *DeleteComparisonReportOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteComparisonReportOKBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Errors); i++ {

		if o.Errors[i] != nil {
			if err := o.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("deleteComparisonReportOK" + "." + "errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteComparisonReportOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteComparisonReportOKBody) UnmarshalBinary(b []byte) error {
	var res DeleteComparisonReportOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*DeleteComparisonReportOKBodyErrorsItems0 delete comparison report o k body errors items0
swagger:model DeleteComparisonReportOKBodyErrorsItems0
*/
type DeleteComparisonReportOKBodyErrorsItems0 struct {

	// Additional detail about the error, if available
	Description string `json:"description,omitempty"`

	// A summary of the error
	Title string `json:"title,omitempty"`
}

// Validate validates this delete comparison report o k body errors items0
func (o *DeleteComparisonReportOKBodyErrorsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this delete comparison report o k body errors items0 based on context it is used
func (o *DeleteComparisonReportOKBodyErrorsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteComparisonReportOKBodyErrorsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteComparisonReportOKBodyErrorsItems0) UnmarshalBinary(b []byte) error {
	var res DeleteComparisonReportOKBodyErrorsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
