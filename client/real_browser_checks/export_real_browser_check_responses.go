// Code generated by go-swagger; DO NOT EDIT.

package real_browser_checks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExportRealBrowserCheckReader is a Reader for the ExportRealBrowserCheck structure.
type ExportRealBrowserCheckReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ExportRealBrowserCheckReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewExportRealBrowserCheckOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewExportRealBrowserCheckOK creates a ExportRealBrowserCheckOK with default headers values
func NewExportRealBrowserCheckOK() *ExportRealBrowserCheckOK {
	var (
		// initialize headers with default values
		xRateLimitLimitDefault = int64("5000")

		xRateLimitResetDefault = int64("1621968845")
	)

	return &ExportRealBrowserCheckOK{

		XRateLimitLimit: xRateLimitLimitDefault,
		XRateLimitReset: xRateLimitResetDefault,
	}
}

/* ExportRealBrowserCheckOK describes a response with status code 200, with default header values.

Includes warnings about the check export,
               and the path to get the raw SIDE script
*/
type ExportRealBrowserCheckOK struct {

	/* The number of requests a user is allowed per hour. Users are identified by IP address.

	   Default: "5000"
	*/
	XRateLimitLimit int64

	/* The number of requests remaining in the current rate limit window
	 */
	XRateLimitRemaining int64

	/* When the current rate limit window resets (in UTC epoch seconds).

	   Default: "1621968845"
	*/
	XRateLimitReset int64

	Payload *ExportRealBrowserCheckOKBody
}

func (o *ExportRealBrowserCheckOK) Error() string {
	return fmt.Sprintf("[GET /v2/checks/real_browsers/{id}/export][%d] exportRealBrowserCheckOK  %+v", 200, o.Payload)
}
func (o *ExportRealBrowserCheckOK) GetPayload() *ExportRealBrowserCheckOKBody {
	return o.Payload
}

func (o *ExportRealBrowserCheckOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header X-RateLimit-Limit
	hdrXRateLimitLimit := response.GetHeader("X-RateLimit-Limit")

	if hdrXRateLimitLimit != "" {
		valxRateLimitLimit, err := swag.ConvertInt64(hdrXRateLimitLimit)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Limit", "header", "int64", hdrXRateLimitLimit)
		}
		o.XRateLimitLimit = valxRateLimitLimit
	}

	// hydrates response header X-RateLimit-Remaining
	hdrXRateLimitRemaining := response.GetHeader("X-RateLimit-Remaining")

	if hdrXRateLimitRemaining != "" {
		valxRateLimitRemaining, err := swag.ConvertInt64(hdrXRateLimitRemaining)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Remaining", "header", "int64", hdrXRateLimitRemaining)
		}
		o.XRateLimitRemaining = valxRateLimitRemaining
	}

	// hydrates response header X-RateLimit-Reset
	hdrXRateLimitReset := response.GetHeader("X-RateLimit-Reset")

	if hdrXRateLimitReset != "" {
		valxRateLimitReset, err := swag.ConvertInt64(hdrXRateLimitReset)
		if err != nil {
			return errors.InvalidType("X-RateLimit-Reset", "header", "int64", hdrXRateLimitReset)
		}
		o.XRateLimitReset = valxRateLimitReset
	}

	o.Payload = new(ExportRealBrowserCheckOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ExportRealBrowserCheckOKBody A Real Browser check converted to a Selenium SIDE script
swagger:model ExportRealBrowserCheckOKBody
*/
type ExportRealBrowserCheckOKBody struct {

	// The endpoint to get the converted script
	// Example: /v2/checks/real_browsers/1/export.side
	Path string `json:"path,omitempty"`

	// A list of warnings about the exported script
	Warnings []string `json:"warnings"`
}

// Validate validates this export real browser check o k body
func (o *ExportRealBrowserCheckOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this export real browser check o k body based on context it is used
func (o *ExportRealBrowserCheckOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ExportRealBrowserCheckOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ExportRealBrowserCheckOKBody) UnmarshalBinary(b []byte) error {
	var res ExportRealBrowserCheckOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
