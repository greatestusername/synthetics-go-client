// Code generated by go-swagger; DO NOT EDIT.

package real_browser_checks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRealBrowserPerformanceKPIsParams creates a new GetRealBrowserPerformanceKPIsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRealBrowserPerformanceKPIsParams() *GetRealBrowserPerformanceKPIsParams {
	return &GetRealBrowserPerformanceKPIsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRealBrowserPerformanceKPIsParamsWithTimeout creates a new GetRealBrowserPerformanceKPIsParams object
// with the ability to set a timeout on a request.
func NewGetRealBrowserPerformanceKPIsParamsWithTimeout(timeout time.Duration) *GetRealBrowserPerformanceKPIsParams {
	return &GetRealBrowserPerformanceKPIsParams{
		timeout: timeout,
	}
}

// NewGetRealBrowserPerformanceKPIsParamsWithContext creates a new GetRealBrowserPerformanceKPIsParams object
// with the ability to set a context for a request.
func NewGetRealBrowserPerformanceKPIsParamsWithContext(ctx context.Context) *GetRealBrowserPerformanceKPIsParams {
	return &GetRealBrowserPerformanceKPIsParams{
		Context: ctx,
	}
}

// NewGetRealBrowserPerformanceKPIsParamsWithHTTPClient creates a new GetRealBrowserPerformanceKPIsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRealBrowserPerformanceKPIsParamsWithHTTPClient(client *http.Client) *GetRealBrowserPerformanceKPIsParams {
	return &GetRealBrowserPerformanceKPIsParams{
		HTTPClient: client,
	}
}

/* GetRealBrowserPerformanceKPIsParams contains all the parameters to send to the API endpoint
   for the get real browser performance k p is operation.

   Typically these are written to a http.Request.
*/
type GetRealBrowserPerformanceKPIsParams struct {

	/* From.

	   The start time for the timeframe.

	   Format: date-time
	*/
	From *strfmt.DateTime

	/* GroupBy.

	   Groups are used to segment the data points returned in the response. Available groups are `page`, `location`, `country`, and `world_region`.
	*/
	GroupBy []string

	/* ID.

	   The ID of the check to fetch.

	   Format: int32
	*/
	ID int32

	/* Interval.

	   The data point interval. **Leave blank for run-level data**, or provide an **integer followed by one of the following characters**: `s` for seconds, `m` for minutes, `h` for hours, `d` for days, `w` for weeks. For example, setting the interval to `1h` will return hourly aggregate data, and `30m` will return half-hour aggregates. Be sure to **provide an aggregate function when a data interval is set**. See `metrics` for more information.
	*/
	Interval *string

	/* Locations.

	   A list of location IDs used to filter the results.
	*/
	Locations []int32

	/* Metrics.

	   The metric names to get data for. Valid metrics include: `first_byte_time_ms`, `dom_interactive_time_ms`, `dom_load_time_ms`, `dom_complete_time_ms`, `start_render_ms`, `onload_time_ms`, `visually_complete_ms`, `fully_loaded_time_ms`, `first_paint_time_ms`, `first_contentful_paint_time_ms`, `first_meaningful_paint_time_ms`, `first_interactive_time_ms`, `first_cpu_idle_time_ms`, `first_request_dns_time_ms`, `first_request_connect_time_ms`, `first_request_ssl_time_ms`, `first_request_send_time_ms`, `first_request_wait_time_ms`, `first_request_receive_time_ms`, `speed_index`, `requests`, `content_bytes`, `html_files`, `html_bytes`, `image_files`, `image_bytes`, `javascript_files`, `javascript_bytes`, `css_files`, `css_bytes`, `video_files`, `video_bytes`, `font_files`, `font_bytes`, `other_files`, `other_bytes`, `client_errors`, `connection_errors`, `server_errors`, `errors`, `run_count`, `success_count`, `failure_count`, `lighthouse_performance_score`, `availability`, `downtime`, `total_blocking_time_ms`, `largest_contentful_paint_time_ms`, and `cumulative_layout_shift`.
	               Prefix the metric with `mean`, `median`, `mode`, `max`, `min`, `count`, `sum`, `stddev`, `percentile_90`, `percentile_95`, and `percentile_99` when an `interval` is provided. *** Note that `first_interactive_time_ms` is equivalent to Time to Interactive.**
	*/
	Metrics []string

	/* PagePositions.

	   Which pages to get data for, based on the order in which the pages were visited. For example, `0` returns data for the first page visited in a run, `1` returns data for the second page visited, and so on.
	*/
	PagePositions []int32

	/* Range.

	   A predefined timeframe to be used instead of `from` and `to`. Defaults to the last hour.
	*/
	Range *string

	/* Status.

	   Filter results based on run result. Use `success` to return data from passing runs, or `failure` to return data from failed runs. Data from both successful and failed runs are returned by default.
	*/
	Status []string

	/* To.

	   The end time for the timeframe.

	   Format: date-time
	*/
	To *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get real browser performance k p is params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRealBrowserPerformanceKPIsParams) WithDefaults() *GetRealBrowserPerformanceKPIsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get real browser performance k p is params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRealBrowserPerformanceKPIsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) WithTimeout(timeout time.Duration) *GetRealBrowserPerformanceKPIsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) WithContext(ctx context.Context) *GetRealBrowserPerformanceKPIsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) WithHTTPClient(client *http.Client) *GetRealBrowserPerformanceKPIsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFrom adds the from to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) WithFrom(from *strfmt.DateTime) *GetRealBrowserPerformanceKPIsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) SetFrom(from *strfmt.DateTime) {
	o.From = from
}

// WithGroupBy adds the groupBy to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) WithGroupBy(groupBy []string) *GetRealBrowserPerformanceKPIsParams {
	o.SetGroupBy(groupBy)
	return o
}

// SetGroupBy adds the groupBy to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) SetGroupBy(groupBy []string) {
	o.GroupBy = groupBy
}

// WithID adds the id to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) WithID(id int32) *GetRealBrowserPerformanceKPIsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) SetID(id int32) {
	o.ID = id
}

// WithInterval adds the interval to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) WithInterval(interval *string) *GetRealBrowserPerformanceKPIsParams {
	o.SetInterval(interval)
	return o
}

// SetInterval adds the interval to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) SetInterval(interval *string) {
	o.Interval = interval
}

// WithLocations adds the locations to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) WithLocations(locations []int32) *GetRealBrowserPerformanceKPIsParams {
	o.SetLocations(locations)
	return o
}

// SetLocations adds the locations to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) SetLocations(locations []int32) {
	o.Locations = locations
}

// WithMetrics adds the metrics to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) WithMetrics(metrics []string) *GetRealBrowserPerformanceKPIsParams {
	o.SetMetrics(metrics)
	return o
}

// SetMetrics adds the metrics to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) SetMetrics(metrics []string) {
	o.Metrics = metrics
}

// WithPagePositions adds the pagePositions to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) WithPagePositions(pagePositions []int32) *GetRealBrowserPerformanceKPIsParams {
	o.SetPagePositions(pagePositions)
	return o
}

// SetPagePositions adds the pagePositions to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) SetPagePositions(pagePositions []int32) {
	o.PagePositions = pagePositions
}

// WithRange adds the rangeVar to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) WithRange(rangeVar *string) *GetRealBrowserPerformanceKPIsParams {
	o.SetRange(rangeVar)
	return o
}

// SetRange adds the range to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) SetRange(rangeVar *string) {
	o.Range = rangeVar
}

// WithStatus adds the status to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) WithStatus(status []string) *GetRealBrowserPerformanceKPIsParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) SetStatus(status []string) {
	o.Status = status
}

// WithTo adds the to to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) WithTo(to *strfmt.DateTime) *GetRealBrowserPerformanceKPIsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get real browser performance k p is params
func (o *GetRealBrowserPerformanceKPIsParams) SetTo(to *strfmt.DateTime) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetRealBrowserPerformanceKPIsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.From != nil {

		// query param from
		var qrFrom strfmt.DateTime

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom.String()
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.GroupBy != nil {

		// binding items for group_by
		joinedGroupBy := o.bindParamGroupBy(reg)

		// query array param group_by
		if err := r.SetQueryParam("group_by", joinedGroupBy...); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt32(o.ID)); err != nil {
		return err
	}

	if o.Interval != nil {

		// query param interval
		var qrInterval string

		if o.Interval != nil {
			qrInterval = *o.Interval
		}
		qInterval := qrInterval
		if qInterval != "" {

			if err := r.SetQueryParam("interval", qInterval); err != nil {
				return err
			}
		}
	}

	if o.Locations != nil {

		// binding items for locations
		joinedLocations := o.bindParamLocations(reg)

		// query array param locations
		if err := r.SetQueryParam("locations", joinedLocations...); err != nil {
			return err
		}
	}

	if o.Metrics != nil {

		// binding items for metrics
		joinedMetrics := o.bindParamMetrics(reg)

		// query array param metrics
		if err := r.SetQueryParam("metrics", joinedMetrics...); err != nil {
			return err
		}
	}

	if o.PagePositions != nil {

		// binding items for page_positions
		joinedPagePositions := o.bindParamPagePositions(reg)

		// query array param page_positions
		if err := r.SetQueryParam("page_positions", joinedPagePositions...); err != nil {
			return err
		}
	}

	if o.Range != nil {

		// query param range
		var qrRange string

		if o.Range != nil {
			qrRange = *o.Range
		}
		qRange := qrRange
		if qRange != "" {

			if err := r.SetQueryParam("range", qRange); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// binding items for status
		joinedStatus := o.bindParamStatus(reg)

		// query array param status
		if err := r.SetQueryParam("status", joinedStatus...); err != nil {
			return err
		}
	}

	if o.To != nil {

		// query param to
		var qrTo strfmt.DateTime

		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo.String()
		if qTo != "" {

			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetRealBrowserPerformanceKPIs binds the parameter group_by
func (o *GetRealBrowserPerformanceKPIsParams) bindParamGroupBy(formats strfmt.Registry) []string {
	groupByIR := o.GroupBy

	var groupByIC []string
	for _, groupByIIR := range groupByIR { // explode []string

		groupByIIV := groupByIIR // string as string
		groupByIC = append(groupByIC, groupByIIV)
	}

	// items.CollectionFormat: ""
	groupByIS := swag.JoinByFormat(groupByIC, "")

	return groupByIS
}

// bindParamGetRealBrowserPerformanceKPIs binds the parameter locations
func (o *GetRealBrowserPerformanceKPIsParams) bindParamLocations(formats strfmt.Registry) []string {
	locationsIR := o.Locations

	var locationsIC []string
	for _, locationsIIR := range locationsIR { // explode []int32

		locationsIIV := swag.FormatInt32(locationsIIR) // int32 as string
		locationsIC = append(locationsIC, locationsIIV)
	}

	// items.CollectionFormat: ""
	locationsIS := swag.JoinByFormat(locationsIC, "")

	return locationsIS
}

// bindParamGetRealBrowserPerformanceKPIs binds the parameter metrics
func (o *GetRealBrowserPerformanceKPIsParams) bindParamMetrics(formats strfmt.Registry) []string {
	metricsIR := o.Metrics

	var metricsIC []string
	for _, metricsIIR := range metricsIR { // explode []string

		metricsIIV := metricsIIR // string as string
		metricsIC = append(metricsIC, metricsIIV)
	}

	// items.CollectionFormat: ""
	metricsIS := swag.JoinByFormat(metricsIC, "")

	return metricsIS
}

// bindParamGetRealBrowserPerformanceKPIs binds the parameter page_positions
func (o *GetRealBrowserPerformanceKPIsParams) bindParamPagePositions(formats strfmt.Registry) []string {
	pagePositionsIR := o.PagePositions

	var pagePositionsIC []string
	for _, pagePositionsIIR := range pagePositionsIR { // explode []int32

		pagePositionsIIV := swag.FormatInt32(pagePositionsIIR) // int32 as string
		pagePositionsIC = append(pagePositionsIC, pagePositionsIIV)
	}

	// items.CollectionFormat: ""
	pagePositionsIS := swag.JoinByFormat(pagePositionsIC, "")

	return pagePositionsIS
}

// bindParamGetRealBrowserPerformanceKPIs binds the parameter status
func (o *GetRealBrowserPerformanceKPIsParams) bindParamStatus(formats strfmt.Registry) []string {
	statusIR := o.Status

	var statusIC []string
	for _, statusIIR := range statusIR { // explode []string

		statusIIV := statusIIR // string as string
		statusIC = append(statusIC, statusIIV)
	}

	// items.CollectionFormat: ""
	statusIS := swag.JoinByFormat(statusIC, "")

	return statusIS
}
