// Code generated by go-swagger; DO NOT EDIT.

package real_browser_checks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new real browser checks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for real browser checks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRealBrowserCheck(params *CreateRealBrowserCheckParams, opts ...ClientOption) (*CreateRealBrowserCheckOK, error)

	DeleteRealBrowserCheck(params *DeleteRealBrowserCheckParams, opts ...ClientOption) (*DeleteRealBrowserCheckOK, error)

	ExportRealBrowserCheck(params *ExportRealBrowserCheckParams, opts ...ClientOption) (*ExportRealBrowserCheckOK, error)

	GetRealBrowserCheck(params *GetRealBrowserCheckParams, opts ...ClientOption) (*GetRealBrowserCheckOK, error)

	GetRealBrowserCheckRun(params *GetRealBrowserCheckRunParams, opts ...ClientOption) (*GetRealBrowserCheckRunOK, error)

	GetRealBrowserCheckRuns(params *GetRealBrowserCheckRunsParams, opts ...ClientOption) (*GetRealBrowserCheckRunsOK, error)

	GetRealBrowserPerformanceKPIs(params *GetRealBrowserPerformanceKPIsParams, opts ...ClientOption) (*GetRealBrowserPerformanceKPIsOK, error)

	ReimportRealBrowserCheck(params *ReimportRealBrowserCheckParams, opts ...ClientOption) (*ReimportRealBrowserCheckOK, error)

	SeleniumSideExport(params *SeleniumSideExportParams, opts ...ClientOption) (*SeleniumSideExportOK, error)

	UpdateRealBrowserCheck(params *UpdateRealBrowserCheckParams, opts ...ClientOption) (*UpdateRealBrowserCheckOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRealBrowserCheck creates a new real browser check

  Returns the new Real Browser check
*/
func (a *Client) CreateRealBrowserCheck(params *CreateRealBrowserCheckParams, opts ...ClientOption) (*CreateRealBrowserCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRealBrowserCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRealBrowserCheck",
		Method:             "POST",
		PathPattern:        "/v2/checks/real_browsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRealBrowserCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRealBrowserCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRealBrowserCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRealBrowserCheck deletes a real browser check

  <b style="color:red">Warning: This operation will delete the check
              and all of its run histories. You cannot undo this action!</b>
*/
func (a *Client) DeleteRealBrowserCheck(params *DeleteRealBrowserCheckParams, opts ...ClientOption) (*DeleteRealBrowserCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRealBrowserCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRealBrowserCheck",
		Method:             "DELETE",
		PathPattern:        "/v2/checks/real_browsers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRealBrowserCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRealBrowserCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRealBrowserCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportRealBrowserCheck exports a real browser check

  Verifies a check can be converted to a Selenium SIDE
              script and returns a path to get the raw script.
*/
func (a *Client) ExportRealBrowserCheck(params *ExportRealBrowserCheckParams, opts ...ClientOption) (*ExportRealBrowserCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportRealBrowserCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "exportRealBrowserCheck",
		Method:             "GET",
		PathPattern:        "/v2/checks/real_browsers/{id}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExportRealBrowserCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportRealBrowserCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportRealBrowserCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRealBrowserCheck gets real browser check detail

  Returns a Real Browser check based on a single ID
*/
func (a *Client) GetRealBrowserCheck(params *GetRealBrowserCheckParams, opts ...ClientOption) (*GetRealBrowserCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRealBrowserCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRealBrowserCheck",
		Method:             "GET",
		PathPattern:        "/v2/checks/real_browsers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRealBrowserCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRealBrowserCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRealBrowserCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRealBrowserCheckRun gets real browser check run

  Returns data for the run, including the status of the run and links to download HAR files
*/
func (a *Client) GetRealBrowserCheckRun(params *GetRealBrowserCheckRunParams, opts ...ClientOption) (*GetRealBrowserCheckRunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRealBrowserCheckRunParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRealBrowserCheckRun",
		Method:             "GET",
		PathPattern:        "/v2/checks/real_browsers/{check_id}/runs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRealBrowserCheckRunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRealBrowserCheckRunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRealBrowserCheckRun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRealBrowserCheckRuns gets real browser check runs

  Returns a paginated list of Real Browser Check runs, ordered by most recent. Optionally, provide timestamps (`from` and `to`, or a predefined `range`) to request runs over a specific timeframe.
*/
func (a *Client) GetRealBrowserCheckRuns(params *GetRealBrowserCheckRunsParams, opts ...ClientOption) (*GetRealBrowserCheckRunsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRealBrowserCheckRunsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRealBrowserCheckRuns",
		Method:             "GET",
		PathPattern:        "/v2/checks/real_browsers/{check_id}/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRealBrowserCheckRunsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRealBrowserCheckRunsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRealBrowserCheckRuns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRealBrowserPerformanceKPIs gets performance k p is

  Returns performance KPI data for each page the check visits.
*/
func (a *Client) GetRealBrowserPerformanceKPIs(params *GetRealBrowserPerformanceKPIsParams, opts ...ClientOption) (*GetRealBrowserPerformanceKPIsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRealBrowserPerformanceKPIsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRealBrowserPerformanceKPIs",
		Method:             "GET",
		PathPattern:        "/v2/checks/real_browsers/{id}/performance_kpis/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRealBrowserPerformanceKPIsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRealBrowserPerformanceKPIsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRealBrowserPerformanceKPIs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReimportRealBrowserCheck res import a real browser check

  Upload a Selenium SIDE or HTML script to update your Real Browser Check.
              Some steps may be removed when importing a Selenium script, either because they are not
              supported by Rigor's test suite, or they duplicate functionality built into Rigor's tests.
              <br/><br/>
              <b style="color:red">Warning: This operation will remove the current steps for this check
              and replace them with steps from the provided script. You cannot undo this action!</b>
*/
func (a *Client) ReimportRealBrowserCheck(params *ReimportRealBrowserCheckParams, opts ...ClientOption) (*ReimportRealBrowserCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReimportRealBrowserCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "reimportRealBrowserCheck",
		Method:             "PUT",
		PathPattern:        "/v2/checks/real_browsers/{id}/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/html", "application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReimportRealBrowserCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReimportRealBrowserCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for reimportRealBrowserCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SeleniumSideExport gets a selenium s ID e script

  Responds with a `.side` script that can be opened
              in the Selenium IDE browser extension. Some check configuration options
              may be ignored, and steps may be altered or disabled in order to run
              better in the Selenium IDE.
*/
func (a *Client) SeleniumSideExport(params *SeleniumSideExportParams, opts ...ClientOption) (*SeleniumSideExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSeleniumSideExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "seleniumSideExport",
		Method:             "GET",
		PathPattern:        "/v2/checks/real_browsers/{id}/export.side",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SeleniumSideExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SeleniumSideExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for seleniumSideExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRealBrowserCheck updates a real browser check

  Returns the updated Real Browser check
*/
func (a *Client) UpdateRealBrowserCheck(params *UpdateRealBrowserCheckParams, opts ...ClientOption) (*UpdateRealBrowserCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRealBrowserCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRealBrowserCheck",
		Method:             "PUT",
		PathPattern:        "/v2/checks/real_browsers/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateRealBrowserCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRealBrowserCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRealBrowserCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
