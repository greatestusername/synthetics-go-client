// Code generated by go-swagger; DO NOT EDIT.

package checks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateCheckSystemEventReader is a Reader for the CreateCheckSystemEvent structure.
type CreateCheckSystemEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateCheckSystemEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateCheckSystemEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateCheckSystemEventOK creates a CreateCheckSystemEventOK with default headers values
func NewCreateCheckSystemEventOK() *CreateCheckSystemEventOK {
	return &CreateCheckSystemEventOK{}
}

/* CreateCheckSystemEventOK describes a response with status code 200, with default header values.

OK
*/
type CreateCheckSystemEventOK struct {
	Payload *CreateCheckSystemEventOKBody
}

func (o *CreateCheckSystemEventOK) Error() string {
	return fmt.Sprintf("[POST /v2/checks/{check_id}/system_events][%d] createCheckSystemEventOK  %+v", 200, o.Payload)
}
func (o *CreateCheckSystemEventOK) GetPayload() *CreateCheckSystemEventOKBody {
	return o.Payload
}

func (o *CreateCheckSystemEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateCheckSystemEventOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateCheckSystemEventBody create check system event body
swagger:model CreateCheckSystemEventBody
*/
type CreateCheckSystemEventBody struct {

	// A summary of the event
	// Example: Jane Doe made the following changes:
	Summary string `json:"summary,omitempty"`

	// When the event took place
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp,omitempty"`

	// A title for the event
	// Example: New Deployment: V2.1
	Title string `json:"title,omitempty"`
}

// Validate validates this create check system event body
func (o *CreateCheckSystemEventBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateCheckSystemEventBody) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(o.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("system_event"+"."+"timestamp", "body", "date-time", o.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create check system event body based on context it is used
func (o *CreateCheckSystemEventBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateCheckSystemEventBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCheckSystemEventBody) UnmarshalBinary(b []byte) error {
	var res CreateCheckSystemEventBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateCheckSystemEventOKBody A system event logs changes made to a check
swagger:model CreateCheckSystemEventOKBody
*/
type CreateCheckSystemEventOKBody struct {

	// creator
	// Required: true
	Creator *CreateCheckSystemEventOKBodyCreator `json:"creator"`

	// description
	// Required: true
	Description *CreateCheckSystemEventOKBodyDescription `json:"description"`

	// Duration of the system event in seconds
	Duration float64 `json:"duration,omitempty"`

	// The unique id for the system event
	// Required: true
	ID *int32 `json:"id"`

	// When the event took place (UTC)
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`

	// The title for the system event
	// Example: Check Edited
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this create check system event o k body
func (o *CreateCheckSystemEventOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateCheckSystemEventOKBody) validateCreator(formats strfmt.Registry) error {

	if err := validate.Required("createCheckSystemEventOK"+"."+"creator", "body", o.Creator); err != nil {
		return err
	}

	if o.Creator != nil {
		if err := o.Creator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createCheckSystemEventOK" + "." + "creator")
			}
			return err
		}
	}

	return nil
}

func (o *CreateCheckSystemEventOKBody) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("createCheckSystemEventOK"+"."+"description", "body", o.Description); err != nil {
		return err
	}

	if o.Description != nil {
		if err := o.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createCheckSystemEventOK" + "." + "description")
			}
			return err
		}
	}

	return nil
}

func (o *CreateCheckSystemEventOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("createCheckSystemEventOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *CreateCheckSystemEventOKBody) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("createCheckSystemEventOK"+"."+"timestamp", "body", o.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("createCheckSystemEventOK"+"."+"timestamp", "body", "date-time", o.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *CreateCheckSystemEventOKBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("createCheckSystemEventOK"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create check system event o k body based on the context it is used
func (o *CreateCheckSystemEventOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateCreator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateCheckSystemEventOKBody) contextValidateCreator(ctx context.Context, formats strfmt.Registry) error {

	if o.Creator != nil {
		if err := o.Creator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createCheckSystemEventOK" + "." + "creator")
			}
			return err
		}
	}

	return nil
}

func (o *CreateCheckSystemEventOKBody) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if o.Description != nil {
		if err := o.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createCheckSystemEventOK" + "." + "description")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateCheckSystemEventOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCheckSystemEventOKBody) UnmarshalBinary(b []byte) error {
	var res CreateCheckSystemEventOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateCheckSystemEventOKBodyCreator create check system event o k body creator
swagger:model CreateCheckSystemEventOKBodyCreator
*/
type CreateCheckSystemEventOKBodyCreator struct {

	// The unique id for the creator
	ID int32 `json:"id,omitempty"`

	// A URL to the user's gravatar image, if available
	// Example: https://secure.gravatar.com/avatar/0.jpg?r=g\u0026d=mm\u0026s=60
	ImageURL string `json:"image_url,omitempty"`

	// The name of the creator
	// Example: Jane Doe
	Name string `json:"name,omitempty"`

	// The type of the creator
	// Example: User
	Type string `json:"type,omitempty"`
}

// Validate validates this create check system event o k body creator
func (o *CreateCheckSystemEventOKBodyCreator) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create check system event o k body creator based on context it is used
func (o *CreateCheckSystemEventOKBodyCreator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateCheckSystemEventOKBodyCreator) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCheckSystemEventOKBodyCreator) UnmarshalBinary(b []byte) error {
	var res CreateCheckSystemEventOKBodyCreator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateCheckSystemEventOKBodyDescription create check system event o k body description
swagger:model CreateCheckSystemEventOKBodyDescription
*/
type CreateCheckSystemEventOKBodyDescription struct {

	// A detailed list describing the event
	// Example: ["Name changed","Steps changed"]
	Detail []string `json:"detail"`

	// A summary of the event
	// Example: Jane Doe made the following changes:
	Summary string `json:"summary,omitempty"`
}

// Validate validates this create check system event o k body description
func (o *CreateCheckSystemEventOKBodyDescription) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create check system event o k body description based on context it is used
func (o *CreateCheckSystemEventOKBodyDescription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateCheckSystemEventOKBodyDescription) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCheckSystemEventOKBodyDescription) UnmarshalBinary(b []byte) error {
	var res CreateCheckSystemEventOKBodyDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
