// Code generated by go-swagger; DO NOT EDIT.

package checks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetChecksParams creates a new GetChecksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetChecksParams() *GetChecksParams {
	return &GetChecksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetChecksParamsWithTimeout creates a new GetChecksParams object
// with the ability to set a timeout on a request.
func NewGetChecksParamsWithTimeout(timeout time.Duration) *GetChecksParams {
	return &GetChecksParams{
		timeout: timeout,
	}
}

// NewGetChecksParamsWithContext creates a new GetChecksParams object
// with the ability to set a context for a request.
func NewGetChecksParamsWithContext(ctx context.Context) *GetChecksParams {
	return &GetChecksParams{
		Context: ctx,
	}
}

// NewGetChecksParamsWithHTTPClient creates a new GetChecksParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetChecksParamsWithHTTPClient(client *http.Client) *GetChecksParams {
	return &GetChecksParams{
		HTTPClient: client,
	}
}

/* GetChecksParams contains all the parameters to send to the API endpoint
   for the get checks operation.

   Typically these are written to a http.Request.
*/
type GetChecksParams struct {

	/* Enabled.

	   Filter checks based on whether they are paused or enabled
	*/
	Enabled *bool

	/* Muted.

	   Filter checks based on whether they are muted or unmuted
	*/
	Muted *bool

	/* Page.

	   Page number, starting at 1

	   Format: int32
	   Default: 1
	*/
	Page *int32

	/* PerPage.

	   The number of checks returned in each page

	   Format: int32
	   Default: 50
	*/
	PerPage *int32

	/* Type.

	   Check type to filter by (defaults to all if no type is provided)
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get checks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetChecksParams) WithDefaults() *GetChecksParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get checks params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetChecksParams) SetDefaults() {
	var (
		pageDefault = int32(1)

		perPageDefault = int32(50)
	)

	val := GetChecksParams{
		Page:    &pageDefault,
		PerPage: &perPageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get checks params
func (o *GetChecksParams) WithTimeout(timeout time.Duration) *GetChecksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get checks params
func (o *GetChecksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get checks params
func (o *GetChecksParams) WithContext(ctx context.Context) *GetChecksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get checks params
func (o *GetChecksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get checks params
func (o *GetChecksParams) WithHTTPClient(client *http.Client) *GetChecksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get checks params
func (o *GetChecksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnabled adds the enabled to the get checks params
func (o *GetChecksParams) WithEnabled(enabled *bool) *GetChecksParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the get checks params
func (o *GetChecksParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithMuted adds the muted to the get checks params
func (o *GetChecksParams) WithMuted(muted *bool) *GetChecksParams {
	o.SetMuted(muted)
	return o
}

// SetMuted adds the muted to the get checks params
func (o *GetChecksParams) SetMuted(muted *bool) {
	o.Muted = muted
}

// WithPage adds the page to the get checks params
func (o *GetChecksParams) WithPage(page *int32) *GetChecksParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get checks params
func (o *GetChecksParams) SetPage(page *int32) {
	o.Page = page
}

// WithPerPage adds the perPage to the get checks params
func (o *GetChecksParams) WithPerPage(perPage *int32) *GetChecksParams {
	o.SetPerPage(perPage)
	return o
}

// SetPerPage adds the perPage to the get checks params
func (o *GetChecksParams) SetPerPage(perPage *int32) {
	o.PerPage = perPage
}

// WithType adds the typeVar to the get checks params
func (o *GetChecksParams) WithType(typeVar *string) *GetChecksParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get checks params
func (o *GetChecksParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetChecksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool

		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {

			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}
	}

	if o.Muted != nil {

		// query param muted
		var qrMuted bool

		if o.Muted != nil {
			qrMuted = *o.Muted
		}
		qMuted := swag.FormatBool(qrMuted)
		if qMuted != "" {

			if err := r.SetQueryParam("muted", qMuted); err != nil {
				return err
			}
		}
	}

	if o.Page != nil {

		// query param page
		var qrPage int32

		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {

			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}
	}

	if o.PerPage != nil {

		// query param per_page
		var qrPerPage int32

		if o.PerPage != nil {
			qrPerPage = *o.PerPage
		}
		qPerPage := swag.FormatInt32(qrPerPage)
		if qPerPage != "" {

			if err := r.SetQueryParam("per_page", qPerPage); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
