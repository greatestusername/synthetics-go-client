// Code generated by go-swagger; DO NOT EDIT.

package checks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCheckSystemEventsParams creates a new GetCheckSystemEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCheckSystemEventsParams() *GetCheckSystemEventsParams {
	return &GetCheckSystemEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCheckSystemEventsParamsWithTimeout creates a new GetCheckSystemEventsParams object
// with the ability to set a timeout on a request.
func NewGetCheckSystemEventsParamsWithTimeout(timeout time.Duration) *GetCheckSystemEventsParams {
	return &GetCheckSystemEventsParams{
		timeout: timeout,
	}
}

// NewGetCheckSystemEventsParamsWithContext creates a new GetCheckSystemEventsParams object
// with the ability to set a context for a request.
func NewGetCheckSystemEventsParamsWithContext(ctx context.Context) *GetCheckSystemEventsParams {
	return &GetCheckSystemEventsParams{
		Context: ctx,
	}
}

// NewGetCheckSystemEventsParamsWithHTTPClient creates a new GetCheckSystemEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCheckSystemEventsParamsWithHTTPClient(client *http.Client) *GetCheckSystemEventsParams {
	return &GetCheckSystemEventsParams{
		HTTPClient: client,
	}
}

/* GetCheckSystemEventsParams contains all the parameters to send to the API endpoint
   for the get check system events operation.

   Typically these are written to a http.Request.
*/
type GetCheckSystemEventsParams struct {

	/* CheckID.

	   ID of check whose system events you want

	   Format: int32
	*/
	CheckID int32

	/* From.

	   The start time for the timeframe

	   Format: date-time
	*/
	From *strfmt.DateTime

	/* Range.

	   A predefined timeframe to be used instead of `from` and `to`. Defaults to the last hour.
	*/
	Range *string

	/* To.

	   The end time for the timeframe

	   Format: date-time
	*/
	To *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get check system events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCheckSystemEventsParams) WithDefaults() *GetCheckSystemEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get check system events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCheckSystemEventsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get check system events params
func (o *GetCheckSystemEventsParams) WithTimeout(timeout time.Duration) *GetCheckSystemEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get check system events params
func (o *GetCheckSystemEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get check system events params
func (o *GetCheckSystemEventsParams) WithContext(ctx context.Context) *GetCheckSystemEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get check system events params
func (o *GetCheckSystemEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get check system events params
func (o *GetCheckSystemEventsParams) WithHTTPClient(client *http.Client) *GetCheckSystemEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get check system events params
func (o *GetCheckSystemEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCheckID adds the checkID to the get check system events params
func (o *GetCheckSystemEventsParams) WithCheckID(checkID int32) *GetCheckSystemEventsParams {
	o.SetCheckID(checkID)
	return o
}

// SetCheckID adds the checkId to the get check system events params
func (o *GetCheckSystemEventsParams) SetCheckID(checkID int32) {
	o.CheckID = checkID
}

// WithFrom adds the from to the get check system events params
func (o *GetCheckSystemEventsParams) WithFrom(from *strfmt.DateTime) *GetCheckSystemEventsParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get check system events params
func (o *GetCheckSystemEventsParams) SetFrom(from *strfmt.DateTime) {
	o.From = from
}

// WithRange adds the rangeVar to the get check system events params
func (o *GetCheckSystemEventsParams) WithRange(rangeVar *string) *GetCheckSystemEventsParams {
	o.SetRange(rangeVar)
	return o
}

// SetRange adds the range to the get check system events params
func (o *GetCheckSystemEventsParams) SetRange(rangeVar *string) {
	o.Range = rangeVar
}

// WithTo adds the to to the get check system events params
func (o *GetCheckSystemEventsParams) WithTo(to *strfmt.DateTime) *GetCheckSystemEventsParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get check system events params
func (o *GetCheckSystemEventsParams) SetTo(to *strfmt.DateTime) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetCheckSystemEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param check_id
	if err := r.SetPathParam("check_id", swag.FormatInt32(o.CheckID)); err != nil {
		return err
	}

	if o.From != nil {

		// query param from
		var qrFrom strfmt.DateTime

		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom.String()
		if qFrom != "" {

			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}
	}

	if o.Range != nil {

		// query param range
		var qrRange string

		if o.Range != nil {
			qrRange = *o.Range
		}
		qRange := qrRange
		if qRange != "" {

			if err := r.SetQueryParam("range", qRange); err != nil {
				return err
			}
		}
	}

	if o.To != nil {

		// query param to
		var qrTo strfmt.DateTime

		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo.String()
		if qTo != "" {

			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
