// Code generated by go-swagger; DO NOT EDIT.

package checks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new checks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for checks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCheckSystemEvent(params *CreateCheckSystemEventParams, opts ...ClientOption) (*CreateCheckSystemEventOK, error)

	GetCheck(params *GetCheckParams, opts ...ClientOption) (*GetCheckOK, error)

	GetCheckLocationMetricData(params *GetCheckLocationMetricDataParams, opts ...ClientOption) (*GetCheckLocationMetricDataOK, error)

	GetCheckMetricData(params *GetCheckMetricDataParams, opts ...ClientOption) (*GetCheckMetricDataOK, error)

	GetCheckMetrics(params *GetCheckMetricsParams, opts ...ClientOption) (*GetCheckMetricsOK, error)

	GetCheckSystemEvents(params *GetCheckSystemEventsParams, opts ...ClientOption) (*GetCheckSystemEventsOK, error)

	GetChecks(params *GetChecksParams, opts ...ClientOption) (*GetChecksOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCheckSystemEvent creates check system event

  Used for creating annotations on checks
*/
func (a *Client) CreateCheckSystemEvent(params *CreateCheckSystemEventParams, opts ...ClientOption) (*CreateCheckSystemEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCheckSystemEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCheckSystemEvent",
		Method:             "POST",
		PathPattern:        "/v2/checks/{check_id}/system_events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCheckSystemEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCheckSystemEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCheckSystemEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCheck gets check detail

  Returns a check based on a single ID.
              Results vary depending on check type, so look at the type-specific documentation as well.
*/
func (a *Client) GetCheck(params *GetCheckParams, opts ...ClientOption) (*GetCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCheckParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCheck",
		Method:             "GET",
		PathPattern:        "/v2/checks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCheckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCheckOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCheck: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCheckLocationMetricData gets check location data

  Returns the data for the check, segmented by location. To segment the data by metric, use the [Get Check Metric Data](#Checks_getCheckMetricData) endpoint. Only available for monitoring checks.
*/
func (a *Client) GetCheckLocationMetricData(params *GetCheckLocationMetricDataParams, opts ...ClientOption) (*GetCheckLocationMetricDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCheckLocationMetricDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCheckLocationMetricData",
		Method:             "GET",
		PathPattern:        "/v2/checks/{id}/locations/metrics/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCheckLocationMetricDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCheckLocationMetricDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCheckLocationMetricData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCheckMetricData gets check metric data

  Returns the data for the check, segmented by metric. To segment the data by location, use the [Get Check Location Data](#Checks_getCheckLocationMetricData) endpoint. Only available for monitoring checks.
*/
func (a *Client) GetCheckMetricData(params *GetCheckMetricDataParams, opts ...ClientOption) (*GetCheckMetricDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCheckMetricDataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCheckMetricData",
		Method:             "GET",
		PathPattern:        "/v2/checks/{id}/metrics/data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCheckMetricDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCheckMetricDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCheckMetricData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCheckMetrics gets check metrics

  Returns the available metrics for the check. Only available for monitoring checks.
*/
func (a *Client) GetCheckMetrics(params *GetCheckMetricsParams, opts ...ClientOption) (*GetCheckMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCheckMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCheckMetrics",
		Method:             "GET",
		PathPattern:        "/v2/checks/{id}/metrics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCheckMetricsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCheckMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCheckMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCheckSystemEvents gets check system events

  Returns a list of system events for the check
*/
func (a *Client) GetCheckSystemEvents(params *GetCheckSystemEventsParams, opts ...ClientOption) (*GetCheckSystemEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCheckSystemEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCheckSystemEvents",
		Method:             "GET",
		PathPattern:        "/v2/checks/{check_id}/system_events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCheckSystemEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCheckSystemEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCheckSystemEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetChecks gets checks

  Returns all checks in the account
*/
func (a *Client) GetChecks(params *GetChecksParams, opts ...ClientOption) (*GetChecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChecksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChecks",
		Method:             "GET",
		PathPattern:        "/v2/checks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetChecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getChecks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
