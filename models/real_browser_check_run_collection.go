// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RealBrowserCheckRunCollection real browser check run collection
//
// swagger:model real_browser_check_run_collection
type RealBrowserCheckRunCollection struct {
	Pagination

	// The unique ID for the check
	// Example: 1
	CheckID int32 `json:"check_id,omitempty"`

	// runs
	Runs []*RbcRunCollectionItem `json:"runs"`

	// timeframe
	Timeframe *RealBrowserCheckRunCollectionAO1Timeframe `json:"timeframe,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *RealBrowserCheckRunCollection) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 Pagination
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.Pagination = aO0

	// AO1
	var dataAO1 struct {
		CheckID int32 `json:"check_id,omitempty"`

		Runs []*RbcRunCollectionItem `json:"runs"`

		Timeframe *RealBrowserCheckRunCollectionAO1Timeframe `json:"timeframe,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CheckID = dataAO1.CheckID

	m.Runs = dataAO1.Runs

	m.Timeframe = dataAO1.Timeframe

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m RealBrowserCheckRunCollection) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.Pagination)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CheckID int32 `json:"check_id,omitempty"`

		Runs []*RbcRunCollectionItem `json:"runs"`

		Timeframe *RealBrowserCheckRunCollectionAO1Timeframe `json:"timeframe,omitempty"`
	}

	dataAO1.CheckID = m.CheckID

	dataAO1.Runs = m.Runs

	dataAO1.Timeframe = m.Timeframe

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this real browser check run collection
func (m *RealBrowserCheckRunCollection) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Pagination
	if err := m.Pagination.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeframe(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RealBrowserCheckRunCollection) validateRuns(formats strfmt.Registry) error {

	if swag.IsZero(m.Runs) { // not required
		return nil
	}

	for i := 0; i < len(m.Runs); i++ {
		if swag.IsZero(m.Runs[i]) { // not required
			continue
		}

		if m.Runs[i] != nil {
			if err := m.Runs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RealBrowserCheckRunCollection) validateTimeframe(formats strfmt.Registry) error {

	if swag.IsZero(m.Timeframe) { // not required
		return nil
	}

	if m.Timeframe != nil {
		if err := m.Timeframe.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeframe")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this real browser check run collection based on the context it is used
func (m *RealBrowserCheckRunCollection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with Pagination
	if err := m.Pagination.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeframe(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RealBrowserCheckRunCollection) contextValidateRuns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Runs); i++ {

		if m.Runs[i] != nil {
			if err := m.Runs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("runs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RealBrowserCheckRunCollection) contextValidateTimeframe(ctx context.Context, formats strfmt.Registry) error {

	if m.Timeframe != nil {
		if err := m.Timeframe.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeframe")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RealBrowserCheckRunCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RealBrowserCheckRunCollection) UnmarshalBinary(b []byte) error {
	var res RealBrowserCheckRunCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RealBrowserCheckRunCollectionAO1Timeframe The timeframe requested (if provided)
// Example: {"from":"2021-05-25T16:54:05Z","to":"2021-05-25T17:54:05Z"}
//
// swagger:model RealBrowserCheckRunCollectionAO1Timeframe
type RealBrowserCheckRunCollectionAO1Timeframe struct {

	// The start time for the timeframe (UTC)
	// Example: 2021-05-25T16:54:05Z
	// Format: date-time
	From strfmt.DateTime `json:"from,omitempty"`

	// The end time for the timeframe (UTC)
	// Example: 2021-05-25T17:54:05Z
	// Format: date-time
	To strfmt.DateTime `json:"to,omitempty"`
}

// Validate validates this real browser check run collection a o1 timeframe
func (m *RealBrowserCheckRunCollectionAO1Timeframe) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RealBrowserCheckRunCollectionAO1Timeframe) validateFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.From) { // not required
		return nil
	}

	if err := validate.FormatOf("timeframe"+"."+"from", "body", "date-time", m.From.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RealBrowserCheckRunCollectionAO1Timeframe) validateTo(formats strfmt.Registry) error {
	if swag.IsZero(m.To) { // not required
		return nil
	}

	if err := validate.FormatOf("timeframe"+"."+"to", "body", "date-time", m.To.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this real browser check run collection a o1 timeframe based on context it is used
func (m *RealBrowserCheckRunCollectionAO1Timeframe) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RealBrowserCheckRunCollectionAO1Timeframe) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RealBrowserCheckRunCollectionAO1Timeframe) UnmarshalBinary(b []byte) error {
	var res RealBrowserCheckRunCollectionAO1Timeframe
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
