// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemEvent A system event logs changes made to a check
//
// swagger:model system_event
type SystemEvent struct {

	// creator
	// Required: true
	Creator *SystemEventCreator `json:"creator"`

	// description
	// Required: true
	Description *SystemEventDescription `json:"description"`

	// Duration of the system event in seconds
	Duration float64 `json:"duration,omitempty"`

	// The unique id for the system event
	// Required: true
	ID *int32 `json:"id"`

	// When the event took place (UTC)
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`

	// The title for the system event
	// Example: Check Edited
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this system event
func (m *SystemEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemEvent) validateCreator(formats strfmt.Registry) error {

	if err := validate.Required("creator", "body", m.Creator); err != nil {
		return err
	}

	if m.Creator != nil {
		if err := m.Creator.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

func (m *SystemEvent) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *SystemEvent) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SystemEvent) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SystemEvent) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this system event based on the context it is used
func (m *SystemEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemEvent) contextValidateCreator(ctx context.Context, formats strfmt.Registry) error {

	if m.Creator != nil {
		if err := m.Creator.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creator")
			}
			return err
		}
	}

	return nil
}

func (m *SystemEvent) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemEvent) UnmarshalBinary(b []byte) error {
	var res SystemEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SystemEventCreator system event creator
//
// swagger:model SystemEventCreator
type SystemEventCreator struct {

	// The unique id for the creator
	ID int32 `json:"id,omitempty"`

	// A URL to the user's gravatar image, if available
	// Example: https://secure.gravatar.com/avatar/0.jpg?r=g\u0026d=mm\u0026s=60
	ImageURL string `json:"image_url,omitempty"`

	// The name of the creator
	// Example: Jane Doe
	Name string `json:"name,omitempty"`

	// The type of the creator
	// Example: User
	Type string `json:"type,omitempty"`
}

// Validate validates this system event creator
func (m *SystemEventCreator) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this system event creator based on context it is used
func (m *SystemEventCreator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SystemEventCreator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemEventCreator) UnmarshalBinary(b []byte) error {
	var res SystemEventCreator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SystemEventDescription system event description
//
// swagger:model SystemEventDescription
type SystemEventDescription struct {

	// A detailed list describing the event
	// Example: ["Name changed","Steps changed"]
	Detail []string `json:"detail"`

	// A summary of the event
	// Example: Jane Doe made the following changes:
	Summary string `json:"summary,omitempty"`
}

// Validate validates this system event description
func (m *SystemEventDescription) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this system event description based on context it is used
func (m *SystemEventDescription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SystemEventDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemEventDescription) UnmarshalBinary(b []byte) error {
	var res SystemEventDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
