// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPCheck An HTTP check
//
// swagger:model http_check
type HTTPCheck struct {
	HTTPCheckAllOf0

	// connection
	Connection *HTTPCheckAO1Connection `json:"connection,omitempty"`

	// http method
	// Enum: [GET HEAD POST POST/XML PUT DELETE]
	HTTPMethod *string `json:"http_method,omitempty"`

	// Request body to send (e.g. post data).
	HTTPRequestBody string `json:"http_request_body,omitempty"`

	// success criteria
	SuccessCriteria []*HTTPCheckSuccessCriteriaItems0 `json:"success_criteria"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HTTPCheck) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 HTTPCheckAllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.HTTPCheckAllOf0 = aO0

	// AO1
	var dataAO1 struct {
		Connection *HTTPCheckAO1Connection `json:"connection,omitempty"`

		HTTPMethod *string `json:"http_method,omitempty"`

		HTTPRequestBody string `json:"http_request_body,omitempty"`

		SuccessCriteria []*HTTPCheckSuccessCriteriaItems0 `json:"success_criteria"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Connection = dataAO1.Connection

	m.HTTPMethod = dataAO1.HTTPMethod

	m.HTTPRequestBody = dataAO1.HTTPRequestBody

	m.SuccessCriteria = dataAO1.SuccessCriteria

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HTTPCheck) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.HTTPCheckAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Connection *HTTPCheckAO1Connection `json:"connection,omitempty"`

		HTTPMethod *string `json:"http_method,omitempty"`

		HTTPRequestBody string `json:"http_request_body,omitempty"`

		SuccessCriteria []*HTTPCheckSuccessCriteriaItems0 `json:"success_criteria"`
	}

	dataAO1.Connection = m.Connection

	dataAO1.HTTPMethod = m.HTTPMethod

	dataAO1.HTTPRequestBody = m.HTTPRequestBody

	dataAO1.SuccessCriteria = m.SuccessCriteria

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this http check
func (m *HTTPCheck) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HTTPCheckAllOf0
	if err := m.HTTPCheckAllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTPMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccessCriteria(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCheck) validateConnection(formats strfmt.Registry) error {

	if swag.IsZero(m.Connection) { // not required
		return nil
	}

	if m.Connection != nil {
		if err := m.Connection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection")
			}
			return err
		}
	}

	return nil
}

var httpCheckTypeHTTPMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GET","HEAD","POST","POST/XML","PUT","DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		httpCheckTypeHTTPMethodPropEnum = append(httpCheckTypeHTTPMethodPropEnum, v)
	}
}

// property enum
func (m *HTTPCheck) validateHTTPMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, httpCheckTypeHTTPMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HTTPCheck) validateHTTPMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateHTTPMethodEnum("http_method", "body", *m.HTTPMethod); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCheck) validateSuccessCriteria(formats strfmt.Registry) error {

	if swag.IsZero(m.SuccessCriteria) { // not required
		return nil
	}

	for i := 0; i < len(m.SuccessCriteria); i++ {
		if swag.IsZero(m.SuccessCriteria[i]) { // not required
			continue
		}

		if m.SuccessCriteria[i] != nil {
			if err := m.SuccessCriteria[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("success_criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this http check based on the context it is used
func (m *HTTPCheck) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HTTPCheckAllOf0
	if err := m.HTTPCheckAllOf0.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuccessCriteria(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCheck) contextValidateConnection(ctx context.Context, formats strfmt.Registry) error {

	if m.Connection != nil {
		if err := m.Connection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connection")
			}
			return err
		}
	}

	return nil
}

func (m *HTTPCheck) contextValidateSuccessCriteria(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SuccessCriteria); i++ {

		if m.SuccessCriteria[i] != nil {
			if err := m.SuccessCriteria[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("success_criteria" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheck) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheck) UnmarshalBinary(b []byte) error {
	var res HTTPCheck
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckAO1Connection HTTP check a o1 connection
//
// swagger:model HTTPCheckAO1Connection
type HTTPCheckAO1Connection struct {

	// The upper limit imposed on all incoming network traffic in Kbps
	DownloadBandwidth *int64 `json:"download_bandwidth,omitempty"`

	// The latency that is added to each request in milliseconds
	Latency *int64 `json:"latency,omitempty"`

	// The percentage of all incoming or outgoing packets that are intentionally dropped
	PacketLoss float64 `json:"packet_loss,omitempty"`

	// The upper limit imposed on all outgoing network traffic in Kbps
	UploadBandwidth *int64 `json:"upload_bandwidth,omitempty"`
}

// Validate validates this HTTP check a o1 connection
func (m *HTTPCheckAO1Connection) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this HTTP check a o1 connection based on context it is used
func (m *HTTPCheckAO1Connection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckAO1Connection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckAO1Connection) UnmarshalBinary(b []byte) error {
	var res HTTPCheckAO1Connection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckAllOf0 An uptime check
//
// swagger:model HTTPCheckAllOf0
type HTTPCheckAllOf0 struct {
	HTTPCheckAllOf0AllOf0

	// url
	URL string `json:"url,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HTTPCheckAllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 HTTPCheckAllOf0AllOf0
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.HTTPCheckAllOf0AllOf0 = aO0

	// AO1
	var dataAO1 struct {
		URL string `json:"url,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.URL = dataAO1.URL

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HTTPCheckAllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.HTTPCheckAllOf0AllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		URL string `json:"url,omitempty"`
	}

	dataAO1.URL = m.URL

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this HTTP check all of0
func (m *HTTPCheckAllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HTTPCheckAllOf0AllOf0
	if err := m.HTTPCheckAllOf0AllOf0.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this HTTP check all of0 based on the context it is used
func (m *HTTPCheckAllOf0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HTTPCheckAllOf0AllOf0
	if err := m.HTTPCheckAllOf0AllOf0.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckAllOf0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckAllOf0) UnmarshalBinary(b []byte) error {
	var res HTTPCheckAllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckAllOf0AllOf0 A monitoring check
//
// swagger:model HTTPCheckAllOf0AllOf0
type HTTPCheckAllOf0AllOf0 struct {

	// When the check was created (UTC)
	// Example: 2021-05-25T17:54:05Z
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// Run the check at this interval (in minutes)
	// Example: 5
	Frequency int64 `json:"frequency,omitempty"`

	// The unique ID for the check
	// Example: 1
	// Required: true
	ID *int32 `json:"id"`

	// links
	Links *HTTPCheckAllOf0AllOf0AO0Links `json:"links,omitempty"`

	// If notifications for this check are muted or not
	// Example: false
	Muted bool `json:"muted,omitempty"`

	// The unique name for the check
	// Example: Example Check
	Name string `json:"name,omitempty"`

	// If the check is paused or not
	// Example: false
	Paused bool `json:"paused,omitempty"`

	// status
	Status *HTTPCheckAllOf0AllOf0AO0Status `json:"status,omitempty"`

	// An array of tags applied to the check
	Tags []*HTTPCheckAllOf0AllOf0TagsItems0 `json:"tags"`

	// The check type
	// Required: true
	// Enum: [http http_multi_step port real_browser benchmark content uptime monitoring api]
	Type string `json:"type"`

	// When the check was last updated (UTC)
	// Example: 2021-05-25T17:54:05Z
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// When enabled, the check will retry up to two times from the same location after a failed run. Ensure your account plan supports this feature before enabling.
	AutoRetry *bool `json:"auto_retry,omitempty"`

	// blackout periods
	BlackoutPeriods []interface{} `json:"blackout_periods"`

	// True if the check is not paused
	Enabled *bool `json:"enabled,omitempty"`

	// http request headers
	HTTPRequestHeaders interface{} `json:"http_request_headers,omitempty"`

	// The integrations to send metrics to
	Integrations []*HTTPCheckAllOf0AllOf0IntegrationsItems0 `json:"integrations"`

	// The locations to run the check from
	Locations []*HTTPCheckAllOf0AllOf0LocationsItems0 `json:"locations"`

	// Configure how and when alerts are sent
	Notifications struct {

		// escalations
		Escalations []*HTTPCheckAllOf0AllOf0EscalationsItems0 `json:"escalations"`

		// Muted checks do not send any alert notifications
		Muted *bool `json:"muted,omitempty"`

		// Only allow notifications during these timeframes
		NotificationWindows []interface{} `json:"notification_windows"`

		// Alert once the number of failed runs reaches this threshold.
		//                                    Recommended threshold is 2.
		// Maximum: 10
		// Minimum: 1
		NotifyAfterFailureCount int32 `json:"notify_after_failure_count,omitempty"`

		// Alert if the check is failing from only one location
		NotifyOnLocationFailure *bool `json:"notify_on_location_failure,omitempty"`

		// notify who
		// Min Items: 1
		// Unique: true
		NotifyWho []*HTTPCheckAllOf0AllOf0NotifyWhoItems0 `json:"notify_who"`

		// Notify via phone call (requires that the recipient has a valid phone number and accepts phone call alerts)
		Call *bool `json:"call,omitempty"`

		// Notify via email
		Email *bool `json:"email,omitempty"`

		// Notify via SMS (requires that the recipient has a valid phone number and accepts SMS alerts)
		Sms *bool `json:"sms,omitempty"`
	} `json:"notifications,omitempty"`

	// Mark a run as a failure if the total response time
	//                                    is above this threshold (in milliseconds)
	// Maximum: 60000
	// Minimum: 0
	ResponseTimeMonitorMilliseconds *int32 `json:"response_time_monitor_milliseconds,omitempty"`

	// When enabled, the check cycles through locations round-robin style with each run.Ensure your account plan supports concurrent checks before disabling.
	RoundRobin bool `json:"round_robin,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HTTPCheckAllOf0AllOf0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		Frequency int64 `json:"frequency,omitempty"`

		ID *int32 `json:"id"`

		Links *HTTPCheckAllOf0AllOf0AO0Links `json:"links,omitempty"`

		Muted bool `json:"muted,omitempty"`

		Name string `json:"name,omitempty"`

		Paused bool `json:"paused,omitempty"`

		Status *HTTPCheckAllOf0AllOf0AO0Status `json:"status,omitempty"`

		Tags []*HTTPCheckAllOf0AllOf0TagsItems0 `json:"tags"`

		Type string `json:"type"`

		UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.CreatedAt = dataAO0.CreatedAt

	m.Frequency = dataAO0.Frequency

	m.ID = dataAO0.ID

	m.Links = dataAO0.Links

	m.Muted = dataAO0.Muted

	m.Name = dataAO0.Name

	m.Paused = dataAO0.Paused

	m.Status = dataAO0.Status

	m.Tags = dataAO0.Tags

	m.Type = dataAO0.Type

	m.UpdatedAt = dataAO0.UpdatedAt

	// AO1
	var dataAO1 struct {
		AutoRetry *bool `json:"auto_retry,omitempty"`

		BlackoutPeriods []interface{} `json:"blackout_periods"`

		Enabled *bool `json:"enabled,omitempty"`

		HTTPRequestHeaders interface{} `json:"http_request_headers,omitempty"`

		Integrations []*HTTPCheckAllOf0AllOf0IntegrationsItems0 `json:"integrations"`

		Locations []*HTTPCheckAllOf0AllOf0LocationsItems0 `json:"locations"`

		Notifications struct {

			// escalations
			Escalations []*HTTPCheckAllOf0AllOf0EscalationsItems0 `json:"escalations"`

			// Muted checks do not send any alert notifications
			Muted *bool `json:"muted,omitempty"`

			// Only allow notifications during these timeframes
			NotificationWindows []interface{} `json:"notification_windows"`

			// Alert once the number of failed runs reaches this threshold.
			//                                    Recommended threshold is 2.
			// Maximum: 10
			// Minimum: 1
			NotifyAfterFailureCount int32 `json:"notify_after_failure_count,omitempty"`

			// Alert if the check is failing from only one location
			NotifyOnLocationFailure *bool `json:"notify_on_location_failure,omitempty"`

			// notify who
			// Min Items: 1
			// Unique: true
			NotifyWho []*HTTPCheckAllOf0AllOf0NotifyWhoItems0 `json:"notify_who"`

			// Notify via phone call (requires that the recipient has a valid phone number and accepts phone call alerts)
			Call *bool `json:"call,omitempty"`

			// Notify via email
			Email *bool `json:"email,omitempty"`

			// Notify via SMS (requires that the recipient has a valid phone number and accepts SMS alerts)
			Sms *bool `json:"sms,omitempty"`
		} `json:"notifications,omitempty"`

		ResponseTimeMonitorMilliseconds *int32 `json:"response_time_monitor_milliseconds,omitempty"`

		RoundRobin bool `json:"round_robin,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AutoRetry = dataAO1.AutoRetry

	m.BlackoutPeriods = dataAO1.BlackoutPeriods

	m.Enabled = dataAO1.Enabled

	m.HTTPRequestHeaders = dataAO1.HTTPRequestHeaders

	m.Integrations = dataAO1.Integrations

	m.Locations = dataAO1.Locations

	m.Notifications = dataAO1.Notifications

	m.ResponseTimeMonitorMilliseconds = dataAO1.ResponseTimeMonitorMilliseconds

	m.RoundRobin = dataAO1.RoundRobin

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HTTPCheckAllOf0AllOf0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		Frequency int64 `json:"frequency,omitempty"`

		ID *int32 `json:"id"`

		Links *HTTPCheckAllOf0AllOf0AO0Links `json:"links,omitempty"`

		Muted bool `json:"muted,omitempty"`

		Name string `json:"name,omitempty"`

		Paused bool `json:"paused,omitempty"`

		Status *HTTPCheckAllOf0AllOf0AO0Status `json:"status,omitempty"`

		Tags []*HTTPCheckAllOf0AllOf0TagsItems0 `json:"tags"`

		Type string `json:"type"`

		UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
	}

	dataAO0.CreatedAt = m.CreatedAt

	dataAO0.Frequency = m.Frequency

	dataAO0.ID = m.ID

	dataAO0.Links = m.Links

	dataAO0.Muted = m.Muted

	dataAO0.Name = m.Name

	dataAO0.Paused = m.Paused

	dataAO0.Status = m.Status

	dataAO0.Tags = m.Tags

	dataAO0.Type = m.Type

	dataAO0.UpdatedAt = m.UpdatedAt

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	var dataAO1 struct {
		AutoRetry *bool `json:"auto_retry,omitempty"`

		BlackoutPeriods []interface{} `json:"blackout_periods"`

		Enabled *bool `json:"enabled,omitempty"`

		HTTPRequestHeaders interface{} `json:"http_request_headers,omitempty"`

		Integrations []*HTTPCheckAllOf0AllOf0IntegrationsItems0 `json:"integrations"`

		Locations []*HTTPCheckAllOf0AllOf0LocationsItems0 `json:"locations"`

		Notifications struct {

			// escalations
			Escalations []*HTTPCheckAllOf0AllOf0EscalationsItems0 `json:"escalations"`

			// Muted checks do not send any alert notifications
			Muted *bool `json:"muted,omitempty"`

			// Only allow notifications during these timeframes
			NotificationWindows []interface{} `json:"notification_windows"`

			// Alert once the number of failed runs reaches this threshold.
			//                                    Recommended threshold is 2.
			// Maximum: 10
			// Minimum: 1
			NotifyAfterFailureCount int32 `json:"notify_after_failure_count,omitempty"`

			// Alert if the check is failing from only one location
			NotifyOnLocationFailure *bool `json:"notify_on_location_failure,omitempty"`

			// notify who
			// Min Items: 1
			// Unique: true
			NotifyWho []*HTTPCheckAllOf0AllOf0NotifyWhoItems0 `json:"notify_who"`

			// Notify via phone call (requires that the recipient has a valid phone number and accepts phone call alerts)
			Call *bool `json:"call,omitempty"`

			// Notify via email
			Email *bool `json:"email,omitempty"`

			// Notify via SMS (requires that the recipient has a valid phone number and accepts SMS alerts)
			Sms *bool `json:"sms,omitempty"`
		} `json:"notifications,omitempty"`

		ResponseTimeMonitorMilliseconds *int32 `json:"response_time_monitor_milliseconds,omitempty"`

		RoundRobin bool `json:"round_robin,omitempty"`
	}

	dataAO1.AutoRetry = m.AutoRetry

	dataAO1.BlackoutPeriods = m.BlackoutPeriods

	dataAO1.Enabled = m.Enabled

	dataAO1.HTTPRequestHeaders = m.HTTPRequestHeaders

	dataAO1.Integrations = m.Integrations

	dataAO1.Locations = m.Locations

	dataAO1.Notifications = m.Notifications

	dataAO1.ResponseTimeMonitorMilliseconds = m.ResponseTimeMonitorMilliseconds

	dataAO1.RoundRobin = m.RoundRobin

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this HTTP check all of0 all of0
func (m *HTTPCheckAllOf0AllOf0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseTimeMonitorMilliseconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCheckAllOf0AllOf0) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var httpCheckAllOf0AllOf0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","http_multi_step","port","real_browser","benchmark","content","uptime","monitoring","api"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		httpCheckAllOf0AllOf0TypeTypePropEnum = append(httpCheckAllOf0AllOf0TypeTypePropEnum, v)
	}
}

// property enum
func (m *HTTPCheckAllOf0AllOf0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, httpCheckAllOf0AllOf0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HTTPCheckAllOf0AllOf0) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0) validateIntegrations(formats strfmt.Registry) error {

	if swag.IsZero(m.Integrations) { // not required
		return nil
	}

	for i := 0; i < len(m.Integrations); i++ {
		if swag.IsZero(m.Integrations[i]) { // not required
			continue
		}

		if m.Integrations[i] != nil {
			if err := m.Integrations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("integrations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0) validateLocations(formats strfmt.Registry) error {

	if swag.IsZero(m.Locations) { // not required
		return nil
	}

	for i := 0; i < len(m.Locations); i++ {
		if swag.IsZero(m.Locations[i]) { // not required
			continue
		}

		if m.Locations[i] != nil {
			if err := m.Locations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("locations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0) validateNotifications(formats strfmt.Registry) error {

	if swag.IsZero(m.Notifications) { // not required
		return nil
	}

	for i := 0; i < len(m.Notifications.Escalations); i++ {
		if swag.IsZero(m.Notifications.Escalations[i]) { // not required
			continue
		}

		if m.Notifications.Escalations[i] != nil {
			if err := m.Notifications.Escalations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notifications" + "." + "escalations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if err := validate.MinimumInt("notifications"+"."+"notify_after_failure_count", "body", int64(m.Notifications.NotifyAfterFailureCount), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("notifications"+"."+"notify_after_failure_count", "body", int64(m.Notifications.NotifyAfterFailureCount), 10, false); err != nil {
		return err
	}

	iNotifyWhoSize := int64(len(m.Notifications.NotifyWho))

	if err := validate.MinItems("notifications"+"."+"notify_who", "body", iNotifyWhoSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("notifications"+"."+"notify_who", "body", m.Notifications.NotifyWho); err != nil {
		return err
	}

	for i := 0; i < len(m.Notifications.NotifyWho); i++ {
		if swag.IsZero(m.Notifications.NotifyWho[i]) { // not required
			continue
		}

		if m.Notifications.NotifyWho[i] != nil {
			if err := m.Notifications.NotifyWho[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notifications" + "." + "notify_who" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0) validateResponseTimeMonitorMilliseconds(formats strfmt.Registry) error {

	if swag.IsZero(m.ResponseTimeMonitorMilliseconds) { // not required
		return nil
	}

	if err := validate.MinimumInt("response_time_monitor_milliseconds", "body", int64(*m.ResponseTimeMonitorMilliseconds), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("response_time_monitor_milliseconds", "body", int64(*m.ResponseTimeMonitorMilliseconds), 60000, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this HTTP check all of0 all of0 based on the context it is used
func (m *HTTPCheckAllOf0AllOf0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIntegrations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCheckAllOf0AllOf0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0) contextValidateIntegrations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Integrations); i++ {

		if m.Integrations[i] != nil {
			if err := m.Integrations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("integrations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0) contextValidateLocations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Locations); i++ {

		if m.Locations[i] != nil {
			if err := m.Locations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("locations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0) contextValidateNotifications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Notifications.Escalations); i++ {

		if m.Notifications.Escalations[i] != nil {
			if err := m.Notifications.Escalations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notifications" + "." + "escalations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	for i := 0; i < len(m.Notifications.NotifyWho); i++ {

		if m.Notifications.NotifyWho[i] != nil {
			if err := m.Notifications.NotifyWho[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notifications" + "." + "notify_who" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0) UnmarshalBinary(b []byte) error {
	var res HTTPCheckAllOf0AllOf0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckAllOf0AllOf0AO0Links HTTP check all of0 all of0 a o0 links
//
// swagger:model HTTPCheckAllOf0AllOf0AO0Links
type HTTPCheckAllOf0AllOf0AO0Links struct {

	// The URL for the last run of this check
	// Example: https://monitoring.rigor.com/checks/1/runs/1
	LastRun string `json:"last_run,omitempty"`

	// The URL for the available metrics for this check
	// Example: https://monitoring-api.rigor.com/v2/checks/1/metrics
	Metrics string `json:"metrics,omitempty"`

	// The URL for the check detail
	// Example: https://monitoring-api.rigor.com/v2/checks/1
	Self string `json:"self,omitempty"`

	// The URL for the HTML view for this check
	// Example: https://monitoring.rigor.com/checks/http/1
	SelfHTML string `json:"self_html,omitempty"`
}

// Validate validates this HTTP check all of0 all of0 a o0 links
func (m *HTTPCheckAllOf0AllOf0AO0Links) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this HTTP check all of0 all of0 a o0 links based on context it is used
func (m *HTTPCheckAllOf0AllOf0AO0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0AO0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0AO0Links) UnmarshalBinary(b []byte) error {
	var res HTTPCheckAllOf0AllOf0AO0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckAllOf0AllOf0AO0Status HTTP check all of0 all of0 a o0 status
//
// swagger:model HTTPCheckAllOf0AllOf0AO0Status
type HTTPCheckAllOf0AllOf0AO0Status struct {

	// True if the fail limit has been reached
	// Example: false
	HasFailure bool `json:"has_failure,omitempty"`

	// True if the fail limit has been reached for at least one location
	// Example: false
	HasLocationFailure string `json:"has_location_failure,omitempty"`

	// The timestamp of the last alert (UTC)
	// Example: 2021-05-24T17:54:05Z
	// Format: date-time
	LastAlertAt strfmt.DateTime `json:"last_alert_at,omitempty"`

	// The response code from the last run
	// Example: 200
	LastCode int32 `json:"last_code,omitempty"`

	// The timestamp of the last failed run (UTC)
	// Example: 2021-05-24T17:54:05Z
	// Format: date-time
	LastFailureAt strfmt.DateTime `json:"last_failure_at,omitempty"`

	// The message from the last run
	// Example: OK
	LastMessage string `json:"last_message,omitempty"`

	// The response time from the last run
	// Example: 50
	LastResponseTime string `json:"last_response_time,omitempty"`

	// The timestamp of the last run (UTC)
	// Example: 2021-05-25T17:49:05Z
	// Format: date-time
	LastRunAt strfmt.DateTime `json:"last_run_at,omitempty"`
}

// Validate validates this HTTP check all of0 all of0 a o0 status
func (m *HTTPCheckAllOf0AllOf0AO0Status) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastAlertAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastFailureAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRunAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCheckAllOf0AllOf0AO0Status) validateLastAlertAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastAlertAt) { // not required
		return nil
	}

	if err := validate.FormatOf("status"+"."+"last_alert_at", "body", "date-time", m.LastAlertAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0AO0Status) validateLastFailureAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastFailureAt) { // not required
		return nil
	}

	if err := validate.FormatOf("status"+"."+"last_failure_at", "body", "date-time", m.LastFailureAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0AO0Status) validateLastRunAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastRunAt) { // not required
		return nil
	}

	if err := validate.FormatOf("status"+"."+"last_run_at", "body", "date-time", m.LastRunAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this HTTP check all of0 all of0 a o0 status based on context it is used
func (m *HTTPCheckAllOf0AllOf0AO0Status) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0AO0Status) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0AO0Status) UnmarshalBinary(b []byte) error {
	var res HTTPCheckAllOf0AllOf0AO0Status
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckAllOf0AllOf0EscalationsItems0 An additional notification to send if an alert is unacknowledged
//
// swagger:model HTTPCheckAllOf0AllOf0EscalationsItems0
type HTTPCheckAllOf0AllOf0EscalationsItems0 struct {

	// Minutes to wait before escalating
	AfterMinutes int32 `json:"after_minutes,omitempty"`

	// Notify via phone call (requires that the recipient has a valid phone number)
	Call *bool `json:"call,omitempty"`

	// Notify via email
	Email *bool `json:"email,omitempty"`

	// Repeat the escalation if the alert is still unacknowledged
	IsRepeat *bool `json:"is_repeat,omitempty"`

	// notification window
	NotificationWindow *HTTPCheckAllOf0AllOf0EscalationsItems0NotificationWindow `json:"notification_window,omitempty"`

	// notify who
	NotifyWho []*HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0 `json:"notify_who"`

	// Notify via SMS (requires that the recipient has a valid phone number)
	Sms *bool `json:"sms,omitempty"`
}

// Validate validates this HTTP check all of0 all of0 escalations items0
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotificationWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifyWho(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCheckAllOf0AllOf0EscalationsItems0) validateNotificationWindow(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationWindow) { // not required
		return nil
	}

	if m.NotificationWindow != nil {
		if err := m.NotificationWindow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notification_window")
			}
			return err
		}
	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0EscalationsItems0) validateNotifyWho(formats strfmt.Registry) error {
	if swag.IsZero(m.NotifyWho) { // not required
		return nil
	}

	for i := 0; i < len(m.NotifyWho); i++ {
		if swag.IsZero(m.NotifyWho[i]) { // not required
			continue
		}

		if m.NotifyWho[i] != nil {
			if err := m.NotifyWho[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notify_who" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this HTTP check all of0 all of0 escalations items0 based on the context it is used
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNotificationWindow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotifyWho(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCheckAllOf0AllOf0EscalationsItems0) contextValidateNotificationWindow(ctx context.Context, formats strfmt.Registry) error {

	if m.NotificationWindow != nil {
		if err := m.NotificationWindow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notification_window")
			}
			return err
		}
	}

	return nil
}

func (m *HTTPCheckAllOf0AllOf0EscalationsItems0) contextValidateNotifyWho(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NotifyWho); i++ {

		if m.NotifyWho[i] != nil {
			if err := m.NotifyWho[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notify_who" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0) UnmarshalBinary(b []byte) error {
	var res HTTPCheckAllOf0AllOf0EscalationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckAllOf0AllOf0EscalationsItems0NotificationWindow HTTP check all of0 all of0 escalations items0 notification window
//
// swagger:model HTTPCheckAllOf0AllOf0EscalationsItems0NotificationWindow
type HTTPCheckAllOf0AllOf0EscalationsItems0NotificationWindow struct {

	// The duration of the notification window, in minutes
	// Example: 180
	DurationInMinutes int32 `json:"duration_in_minutes,omitempty"`

	// The end time for the notification window, formatted like 1:30pm or 13:30.
	// Example: 15:00
	EndTime string `json:"end_time,omitempty"`

	// The start time for the notification window, formatted like 1:30pm or 13:30.
	// Example: 12:00
	StartTime string `json:"start_time,omitempty"`

	// The time zone for the notification window (see <a href='http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html'>list of available time zones</a>)
	// Example: Eastern Time (US \u0026 Canada)
	TimeZone string `json:"time_zone,omitempty"`
}

// Validate validates this HTTP check all of0 all of0 escalations items0 notification window
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0NotificationWindow) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this HTTP check all of0 all of0 escalations items0 notification window based on context it is used
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0NotificationWindow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0NotificationWindow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0NotificationWindow) UnmarshalBinary(b []byte) error {
	var res HTTPCheckAllOf0AllOf0EscalationsItems0NotificationWindow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0 Where to send escalations
//
// swagger:model HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0
type HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0 struct {

	// The recipient's email, if notifying a custom email address
	CustomEmail string `json:"custom_email,omitempty"`

	// The id of the user or group
	ID int32 `json:"id,omitempty"`

	// links
	Links *HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0Links `json:"links,omitempty"`

	// The type of recipient. Can be either `user` or `group`.
	Type string `json:"type,omitempty"`
}

// Validate validates this HTTP check all of0 all of0 escalations items0 notify who items0
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this HTTP check all of0 all of0 escalations items0 notify who items0 based on the context it is used
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0) UnmarshalBinary(b []byte) error {
	var res HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0Links HTTP check all of0 all of0 escalations items0 notify who items0 links
//
// swagger:model HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0Links
type HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0Links struct {

	// The html view for this recipient, if available
	SelfHTML string `json:"self_html,omitempty"`
}

// Validate validates this HTTP check all of0 all of0 escalations items0 notify who items0 links
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0Links) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this HTTP check all of0 all of0 escalations items0 notify who items0 links based on context it is used
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0Links) UnmarshalBinary(b []byte) error {
	var res HTTPCheckAllOf0AllOf0EscalationsItems0NotifyWhoItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckAllOf0AllOf0IntegrationsItems0 HTTP check all of0 all of0 integrations items0
// Example: {"id":1,"name":"Some Great Integration"}
//
// swagger:model HTTPCheckAllOf0AllOf0IntegrationsItems0
type HTTPCheckAllOf0AllOf0IntegrationsItems0 struct {

	// The unique ID for the integration
	ID int32 `json:"id,omitempty"`

	// The name of the integration
	Name string `json:"name,omitempty"`
}

// Validate validates this HTTP check all of0 all of0 integrations items0
func (m *HTTPCheckAllOf0AllOf0IntegrationsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this HTTP check all of0 all of0 integrations items0 based on context it is used
func (m *HTTPCheckAllOf0AllOf0IntegrationsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0IntegrationsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0IntegrationsItems0) UnmarshalBinary(b []byte) error {
	var res HTTPCheckAllOf0AllOf0IntegrationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckAllOf0AllOf0LocationsItems0 HTTP check all of0 all of0 locations items0
// Example: {"id":1,"name":"N. Virginia","region_code":"na-us-virginia","world_region":"NA"}
//
// swagger:model HTTPCheckAllOf0AllOf0LocationsItems0
type HTTPCheckAllOf0AllOf0LocationsItems0 struct {

	// The unique ID for the location
	ID int32 `json:"id,omitempty"`

	// The name of the location
	Name string `json:"name,omitempty"`

	// A readable code representing the location
	RegionCode string `json:"region_code,omitempty"`

	// The region the location is in
	WorldRegion string `json:"world_region,omitempty"`
}

// Validate validates this HTTP check all of0 all of0 locations items0
func (m *HTTPCheckAllOf0AllOf0LocationsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this HTTP check all of0 all of0 locations items0 based on context it is used
func (m *HTTPCheckAllOf0AllOf0LocationsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0LocationsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0LocationsItems0) UnmarshalBinary(b []byte) error {
	var res HTTPCheckAllOf0AllOf0LocationsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckAllOf0AllOf0NotifyWhoItems0 Where to send notifications
//
// swagger:model HTTPCheckAllOf0AllOf0NotifyWhoItems0
type HTTPCheckAllOf0AllOf0NotifyWhoItems0 struct {

	// The recipient's email, if notifying a custom email address
	CustomUserEmail string `json:"custom_user_email,omitempty"`

	// The id of the user, group, or alert webhook
	ID int32 `json:"id,omitempty"`

	// links
	Links *HTTPCheckAllOf0AllOf0NotifyWhoItems0AO0Links `json:"links,omitempty"`

	// The type of recipient. Can be either `user`, `group`, or `alert_webhook`.
	Type string `json:"type,omitempty"`

	// Notify via phone call (requires that the recipient has a valid phone number and accepts phone call alerts)
	Call *bool `json:"call,omitempty"`

	// Notify via email
	Email *bool `json:"email,omitempty"`

	// Notify via SMS (requires that the recipient has a valid phone number and accepts SMS alerts)
	Sms *bool `json:"sms,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HTTPCheckAllOf0AllOf0NotifyWhoItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		CustomUserEmail string `json:"custom_user_email,omitempty"`

		ID int32 `json:"id,omitempty"`

		Links *HTTPCheckAllOf0AllOf0NotifyWhoItems0AO0Links `json:"links,omitempty"`

		Type string `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.CustomUserEmail = dataAO0.CustomUserEmail

	m.ID = dataAO0.ID

	m.Links = dataAO0.Links

	m.Type = dataAO0.Type

	// AO1
	var dataAO1 struct {
		Call *bool `json:"call,omitempty"`

		Email *bool `json:"email,omitempty"`

		Sms *bool `json:"sms,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Call = dataAO1.Call

	m.Email = dataAO1.Email

	m.Sms = dataAO1.Sms

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HTTPCheckAllOf0AllOf0NotifyWhoItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		CustomUserEmail string `json:"custom_user_email,omitempty"`

		ID int32 `json:"id,omitempty"`

		Links *HTTPCheckAllOf0AllOf0NotifyWhoItems0AO0Links `json:"links,omitempty"`

		Type string `json:"type,omitempty"`
	}

	dataAO0.CustomUserEmail = m.CustomUserEmail

	dataAO0.ID = m.ID

	dataAO0.Links = m.Links

	dataAO0.Type = m.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	var dataAO1 struct {
		Call *bool `json:"call,omitempty"`

		Email *bool `json:"email,omitempty"`

		Sms *bool `json:"sms,omitempty"`
	}

	dataAO1.Call = m.Call

	dataAO1.Email = m.Email

	dataAO1.Sms = m.Sms

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this HTTP check all of0 all of0 notify who items0
func (m *HTTPCheckAllOf0AllOf0NotifyWhoItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCheckAllOf0AllOf0NotifyWhoItems0) validateLinks(formats strfmt.Registry) error {

	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this HTTP check all of0 all of0 notify who items0 based on the context it is used
func (m *HTTPCheckAllOf0AllOf0NotifyWhoItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HTTPCheckAllOf0AllOf0NotifyWhoItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0NotifyWhoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0NotifyWhoItems0) UnmarshalBinary(b []byte) error {
	var res HTTPCheckAllOf0AllOf0NotifyWhoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckAllOf0AllOf0NotifyWhoItems0AO0Links HTTP check all of0 all of0 notify who items0 a o0 links
//
// swagger:model HTTPCheckAllOf0AllOf0NotifyWhoItems0AO0Links
type HTTPCheckAllOf0AllOf0NotifyWhoItems0AO0Links struct {

	// The html view for this recipient, if available
	SelfHTML string `json:"self_html,omitempty"`
}

// Validate validates this HTTP check all of0 all of0 notify who items0 a o0 links
func (m *HTTPCheckAllOf0AllOf0NotifyWhoItems0AO0Links) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this HTTP check all of0 all of0 notify who items0 a o0 links based on context it is used
func (m *HTTPCheckAllOf0AllOf0NotifyWhoItems0AO0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0NotifyWhoItems0AO0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0NotifyWhoItems0AO0Links) UnmarshalBinary(b []byte) error {
	var res HTTPCheckAllOf0AllOf0NotifyWhoItems0AO0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckAllOf0AllOf0TagsItems0 HTTP check all of0 all of0 tags items0
//
// swagger:model HTTPCheckAllOf0AllOf0TagsItems0
type HTTPCheckAllOf0AllOf0TagsItems0 struct {

	// id
	// Example: 1
	ID int32 `json:"id,omitempty"`

	// name
	// Example: example tag
	Name string `json:"name,omitempty"`
}

// Validate validates this HTTP check all of0 all of0 tags items0
func (m *HTTPCheckAllOf0AllOf0TagsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this HTTP check all of0 all of0 tags items0 based on context it is used
func (m *HTTPCheckAllOf0AllOf0TagsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0TagsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckAllOf0AllOf0TagsItems0) UnmarshalBinary(b []byte) error {
	var res HTTPCheckAllOf0AllOf0TagsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HTTPCheckSuccessCriteriaItems0 A criterion for the check to pass
//
// swagger:model HTTPCheckSuccessCriteriaItems0
type HTTPCheckSuccessCriteriaItems0 struct {

	// action type
	// Required: true
	// Enum: [presence_of_text absence_of_text matches_regular_expression does_not_contain_regular_expression response_code goes_to_url]
	ActionType *string `json:"action_type"`

	// comparison string
	// Required: true
	ComparisonString *string `json:"comparison_string"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// updated at
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// Validate validates this HTTP check success criteria items0
func (m *HTTPCheckSuccessCriteriaItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComparisonString(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var httpCheckSuccessCriteriaItems0TypeActionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["presence_of_text","absence_of_text","matches_regular_expression","does_not_contain_regular_expression","response_code","goes_to_url"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		httpCheckSuccessCriteriaItems0TypeActionTypePropEnum = append(httpCheckSuccessCriteriaItems0TypeActionTypePropEnum, v)
	}
}

const (

	// HTTPCheckSuccessCriteriaItems0ActionTypePresenceOfText captures enum value "presence_of_text"
	HTTPCheckSuccessCriteriaItems0ActionTypePresenceOfText string = "presence_of_text"

	// HTTPCheckSuccessCriteriaItems0ActionTypeAbsenceOfText captures enum value "absence_of_text"
	HTTPCheckSuccessCriteriaItems0ActionTypeAbsenceOfText string = "absence_of_text"

	// HTTPCheckSuccessCriteriaItems0ActionTypeMatchesRegularExpression captures enum value "matches_regular_expression"
	HTTPCheckSuccessCriteriaItems0ActionTypeMatchesRegularExpression string = "matches_regular_expression"

	// HTTPCheckSuccessCriteriaItems0ActionTypeDoesNotContainRegularExpression captures enum value "does_not_contain_regular_expression"
	HTTPCheckSuccessCriteriaItems0ActionTypeDoesNotContainRegularExpression string = "does_not_contain_regular_expression"

	// HTTPCheckSuccessCriteriaItems0ActionTypeResponseCode captures enum value "response_code"
	HTTPCheckSuccessCriteriaItems0ActionTypeResponseCode string = "response_code"

	// HTTPCheckSuccessCriteriaItems0ActionTypeGoesToURL captures enum value "goes_to_url"
	HTTPCheckSuccessCriteriaItems0ActionTypeGoesToURL string = "goes_to_url"
)

// prop value enum
func (m *HTTPCheckSuccessCriteriaItems0) validateActionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, httpCheckSuccessCriteriaItems0TypeActionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HTTPCheckSuccessCriteriaItems0) validateActionType(formats strfmt.Registry) error {

	if err := validate.Required("action_type", "body", m.ActionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionTypeEnum("action_type", "body", *m.ActionType); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCheckSuccessCriteriaItems0) validateComparisonString(formats strfmt.Registry) error {

	if err := validate.Required("comparison_string", "body", m.ComparisonString); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCheckSuccessCriteriaItems0) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *HTTPCheckSuccessCriteriaItems0) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this HTTP check success criteria items0 based on context it is used
func (m *HTTPCheckSuccessCriteriaItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HTTPCheckSuccessCriteriaItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPCheckSuccessCriteriaItems0) UnmarshalBinary(b []byte) error {
	var res HTTPCheckSuccessCriteriaItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
