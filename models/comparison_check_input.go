// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComparisonCheckInput comparison check input
//
// swagger:model comparison_check_input
type ComparisonCheckInput struct {

	// When set to `true`, the metrics from this check are used as a baseline for the other checks
	// Example: true
	Baseline bool `json:"baseline,omitempty"`

	// The unique ID of the check attached to the Comparison Report
	// Example: 1
	// Required: true
	ID *int32 `json:"id"`

	// An optional alias to use in place of the check name in the Comparison Report
	// Example: Example Nickname
	Nickname string `json:"nickname,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ComparisonCheckInput) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		Baseline bool `json:"baseline,omitempty"`

		ID *int32 `json:"id"`

		Nickname string `json:"nickname,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.Baseline = dataAO0.Baseline

	m.ID = dataAO0.ID

	m.Nickname = dataAO0.Nickname

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ComparisonCheckInput) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 1)

	var dataAO0 struct {
		Baseline bool `json:"baseline,omitempty"`

		ID *int32 `json:"id"`

		Nickname string `json:"nickname,omitempty"`
	}

	dataAO0.Baseline = m.Baseline

	dataAO0.ID = m.ID

	dataAO0.Nickname = m.Nickname

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this comparison check input
func (m *ComparisonCheckInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComparisonCheckInput) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this comparison check input based on context it is used
func (m *ComparisonCheckInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ComparisonCheckInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComparisonCheckInput) UnmarshalBinary(b []byte) error {
	var res ComparisonCheckInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
