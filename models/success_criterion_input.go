// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SuccessCriterionInput A criterion for the check to pass
//
// swagger:model success_criterion_input
type SuccessCriterionInput struct {

	// action type
	// Required: true
	// Enum: [presence_of_text absence_of_text matches_regular_expression does_not_contain_regular_expression response_code goes_to_url]
	ActionType *string `json:"action_type"`

	// comparison string
	// Required: true
	ComparisonString *string `json:"comparison_string"`
}

// Validate validates this success criterion input
func (m *SuccessCriterionInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComparisonString(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var successCriterionInputTypeActionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["presence_of_text","absence_of_text","matches_regular_expression","does_not_contain_regular_expression","response_code","goes_to_url"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		successCriterionInputTypeActionTypePropEnum = append(successCriterionInputTypeActionTypePropEnum, v)
	}
}

const (

	// SuccessCriterionInputActionTypePresenceOfText captures enum value "presence_of_text"
	SuccessCriterionInputActionTypePresenceOfText string = "presence_of_text"

	// SuccessCriterionInputActionTypeAbsenceOfText captures enum value "absence_of_text"
	SuccessCriterionInputActionTypeAbsenceOfText string = "absence_of_text"

	// SuccessCriterionInputActionTypeMatchesRegularExpression captures enum value "matches_regular_expression"
	SuccessCriterionInputActionTypeMatchesRegularExpression string = "matches_regular_expression"

	// SuccessCriterionInputActionTypeDoesNotContainRegularExpression captures enum value "does_not_contain_regular_expression"
	SuccessCriterionInputActionTypeDoesNotContainRegularExpression string = "does_not_contain_regular_expression"

	// SuccessCriterionInputActionTypeResponseCode captures enum value "response_code"
	SuccessCriterionInputActionTypeResponseCode string = "response_code"

	// SuccessCriterionInputActionTypeGoesToURL captures enum value "goes_to_url"
	SuccessCriterionInputActionTypeGoesToURL string = "goes_to_url"
)

// prop value enum
func (m *SuccessCriterionInput) validateActionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, successCriterionInputTypeActionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SuccessCriterionInput) validateActionType(formats strfmt.Registry) error {

	if err := validate.Required("action_type", "body", m.ActionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionTypeEnum("action_type", "body", *m.ActionType); err != nil {
		return err
	}

	return nil
}

func (m *SuccessCriterionInput) validateComparisonString(formats strfmt.Registry) error {

	if err := validate.Required("comparison_string", "body", m.ComparisonString); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this success criterion input based on context it is used
func (m *SuccessCriterionInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SuccessCriterionInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SuccessCriterionInput) UnmarshalBinary(b []byte) error {
	var res SuccessCriterionInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
