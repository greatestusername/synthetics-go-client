// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RealBrowserCheckRun real browser check run
//
// swagger:model real_browser_check_run
type RealBrowserCheckRun struct {

	// The unique ID for the check
	// Example: 1
	CheckID int32 `json:"check_id,omitempty"`

	// The unique ID for the check run
	// Example: 1
	ID int32 `json:"id,omitempty"`

	// The IP address from which the check was run
	// Example: 123.456.789.123
	IPAddress string `json:"ip_address,omitempty"`

	// location
	Location *Location `json:"location,omitempty"`

	// A message summarizing the run result
	// Example: OK
	Message string `json:"message,omitempty"`

	// An array of pages visited during this run
	Pages []*RealBrowserCheckRunPage `json:"pages"`

	// URL to download the archive of all screenshots for a run
	// Example: https://rbc-data.s3.amazonaws.com/example/screenshots
	ScreenshotArchiveURL string `json:"screenshot_archive_url,omitempty"`

	// A sharable link that can be viewed by anyone
	// Example: https://monitoring.rigor.com/share/64ec88ca00b268e5ba1a35678a1b5316d212f4f366b2477232534a8aeca37f3c*OzE7Mg==
	ShareLink string `json:"share_link,omitempty"`

	// The status of the run (whether it succeeded or failed)
	// Example: success
	// Enum: [success failure]
	Status string `json:"status,omitempty"`

	// Time when the check run started (UTC)
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this real browser check run
func (m *RealBrowserCheckRun) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RealBrowserCheckRun) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *RealBrowserCheckRun) validatePages(formats strfmt.Registry) error {
	if swag.IsZero(m.Pages) { // not required
		return nil
	}

	for i := 0; i < len(m.Pages); i++ {
		if swag.IsZero(m.Pages[i]) { // not required
			continue
		}

		if m.Pages[i] != nil {
			if err := m.Pages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var realBrowserCheckRunTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["success","failure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		realBrowserCheckRunTypeStatusPropEnum = append(realBrowserCheckRunTypeStatusPropEnum, v)
	}
}

const (

	// RealBrowserCheckRunStatusSuccess captures enum value "success"
	RealBrowserCheckRunStatusSuccess string = "success"

	// RealBrowserCheckRunStatusFailure captures enum value "failure"
	RealBrowserCheckRunStatusFailure string = "failure"
)

// prop value enum
func (m *RealBrowserCheckRun) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, realBrowserCheckRunTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RealBrowserCheckRun) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *RealBrowserCheckRun) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this real browser check run based on the context it is used
func (m *RealBrowserCheckRun) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RealBrowserCheckRun) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {
		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *RealBrowserCheckRun) contextValidatePages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Pages); i++ {

		if m.Pages[i] != nil {
			if err := m.Pages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RealBrowserCheckRun) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RealBrowserCheckRun) UnmarshalBinary(b []byte) error {
	var res RealBrowserCheckRun
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
