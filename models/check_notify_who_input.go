// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CheckNotifyWhoInput Where to send notifications
//
// swagger:model check_notify_who_input
type CheckNotifyWhoInput struct {

	// A custom email to notify. Other fields can be left blank when setting this.
	CustomEmail string `json:"custom_email,omitempty"`

	// The id of the user, group, or alert webhook
	ID int32 `json:"id,omitempty"`

	// The type of recipient. Can be either `user`, `group`, or `alert_webhook`.
	Type string `json:"type,omitempty"`

	// Notify via phone call (requires that the recipient has a valid phone number and accepts phone call alerts)
	Call *bool `json:"call,omitempty"`

	// Notify via email
	Email *bool `json:"email,omitempty"`

	// Notify via SMS (requires that the recipient has a valid phone number and accepts SMS alerts)
	Sms *bool `json:"sms,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CheckNotifyWhoInput) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		CustomEmail string `json:"custom_email,omitempty"`

		ID int32 `json:"id,omitempty"`

		Type string `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.CustomEmail = dataAO0.CustomEmail

	m.ID = dataAO0.ID

	m.Type = dataAO0.Type

	// AO1
	var dataAO1 struct {
		Call *bool `json:"call,omitempty"`

		Email *bool `json:"email,omitempty"`

		Sms *bool `json:"sms,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Call = dataAO1.Call

	m.Email = dataAO1.Email

	m.Sms = dataAO1.Sms

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CheckNotifyWhoInput) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		CustomEmail string `json:"custom_email,omitempty"`

		ID int32 `json:"id,omitempty"`

		Type string `json:"type,omitempty"`
	}

	dataAO0.CustomEmail = m.CustomEmail

	dataAO0.ID = m.ID

	dataAO0.Type = m.Type

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)
	var dataAO1 struct {
		Call *bool `json:"call,omitempty"`

		Email *bool `json:"email,omitempty"`

		Sms *bool `json:"sms,omitempty"`
	}

	dataAO1.Call = m.Call

	dataAO1.Email = m.Email

	dataAO1.Sms = m.Sms

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this check notify who input
func (m *CheckNotifyWhoInput) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this check notify who input based on context it is used
func (m *CheckNotifyWhoInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CheckNotifyWhoInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckNotifyWhoInput) UnmarshalBinary(b []byte) error {
	var res CheckNotifyWhoInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
