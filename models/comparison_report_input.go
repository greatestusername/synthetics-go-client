// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ComparisonReportInput The parameters for a Comparison Report
//
// swagger:model comparison_report_input
type ComparisonReportInput struct {
	ComparisonReportGeneric

	// An array of Real Browser checks selected for the Comparison Report. Needs to have
	//                                   at least two checks per comparison report
	Checks []*ComparisonCheckInput `json:"checks"`

	// An array of location IDs selected for the Comparison Report. If this array is empty,
	//                                   the report will include data from all locations.
	Locations []int32 `json:"locations"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ComparisonReportInput) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ComparisonReportGeneric
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ComparisonReportGeneric = aO0

	// AO1
	var dataAO1 struct {
		Checks []*ComparisonCheckInput `json:"checks"`

		Locations []int32 `json:"locations"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Checks = dataAO1.Checks

	m.Locations = dataAO1.Locations

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ComparisonReportInput) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ComparisonReportGeneric)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Checks []*ComparisonCheckInput `json:"checks"`

		Locations []int32 `json:"locations"`
	}

	dataAO1.Checks = m.Checks

	dataAO1.Locations = m.Locations

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this comparison report input
func (m *ComparisonReportInput) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ComparisonReportGeneric
	if err := m.ComparisonReportGeneric.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChecks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComparisonReportInput) validateChecks(formats strfmt.Registry) error {

	if swag.IsZero(m.Checks) { // not required
		return nil
	}

	for i := 0; i < len(m.Checks); i++ {
		if swag.IsZero(m.Checks[i]) { // not required
			continue
		}

		if m.Checks[i] != nil {
			if err := m.Checks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this comparison report input based on the context it is used
func (m *ComparisonReportInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ComparisonReportGeneric
	if err := m.ComparisonReportGeneric.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChecks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ComparisonReportInput) contextValidateChecks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Checks); i++ {

		if m.Checks[i] != nil {
			if err := m.Checks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ComparisonReportInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ComparisonReportInput) UnmarshalBinary(b []byte) error {
	var res ComparisonReportInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
