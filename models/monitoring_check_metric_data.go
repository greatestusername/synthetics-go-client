// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MonitoringCheckMetricData Check data for the metric
//
// swagger:model monitoring_check_metric_data
type MonitoringCheckMetricData struct {

	// The start time for the timeframe (UTC)
	// Example: 2021-05-25T16:54:05Z
	// Required: true
	// Format: date-time
	From *strfmt.DateTime `json:"from"`

	// The unique ID for the check
	// Example: 1
	ID int32 `json:"id,omitempty"`

	// A list of location IDs the check ran from during this timeframe
	// Example: [1,2]
	Locations []int32 `json:"locations"`

	// A list of the metric names included in series
	// Example: ["percentage_uptime"]
	// Required: true
	Names []string `json:"names"`

	// The predefined timeframe, if provided
	// Enum: [last_hour last_4_hours last_8_hours last_12_hours last_24_hours yesterday today last_7_days last_30_days this_week last_week this_month month_to_date last_month last_3_months last_6_months last_12_months]
	Range string `json:"range,omitempty"`

	// An array of data sets, one for each metric
	// Required: true
	Series []*MetricSeries `json:"series"`

	// Aggregate data for each metric, over the given timeframe
	// Example: {"percentage_uptime":99.3}
	Summary interface{} `json:"summary,omitempty"`

	// The end time for the timeframe (UTC)
	// Example: 2021-05-25T17:54:05Z
	// Required: true
	// Format: date-time
	To *strfmt.DateTime `json:"to"`
}

// Validate validates this monitoring check metric data
func (m *MonitoringCheckMetricData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoringCheckMetricData) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	if err := validate.FormatOf("from", "body", "date-time", m.From.String(), formats); err != nil {
		return err
	}

	return nil
}

var monitoringCheckMetricDataNamesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["average_response_time","max_response_time","min_response_time","standard_deviation","run_count","error_count","percentage_uptime","percentage_downtime","sla_percentage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitoringCheckMetricDataNamesItemsEnum = append(monitoringCheckMetricDataNamesItemsEnum, v)
	}
}

func (m *MonitoringCheckMetricData) validateNamesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, monitoringCheckMetricDataNamesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MonitoringCheckMetricData) validateNames(formats strfmt.Registry) error {

	if err := validate.Required("names", "body", m.Names); err != nil {
		return err
	}

	for i := 0; i < len(m.Names); i++ {

		// value enum
		if err := m.validateNamesItemsEnum("names"+"."+strconv.Itoa(i), "body", m.Names[i]); err != nil {
			return err
		}

	}

	return nil
}

var monitoringCheckMetricDataTypeRangePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["last_hour","last_4_hours","last_8_hours","last_12_hours","last_24_hours","yesterday","today","last_7_days","last_30_days","this_week","last_week","this_month","month_to_date","last_month","last_3_months","last_6_months","last_12_months"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitoringCheckMetricDataTypeRangePropEnum = append(monitoringCheckMetricDataTypeRangePropEnum, v)
	}
}

const (

	// MonitoringCheckMetricDataRangeLastHour captures enum value "last_hour"
	MonitoringCheckMetricDataRangeLastHour string = "last_hour"

	// MonitoringCheckMetricDataRangeLast4Hours captures enum value "last_4_hours"
	MonitoringCheckMetricDataRangeLast4Hours string = "last_4_hours"

	// MonitoringCheckMetricDataRangeLast8Hours captures enum value "last_8_hours"
	MonitoringCheckMetricDataRangeLast8Hours string = "last_8_hours"

	// MonitoringCheckMetricDataRangeLast12Hours captures enum value "last_12_hours"
	MonitoringCheckMetricDataRangeLast12Hours string = "last_12_hours"

	// MonitoringCheckMetricDataRangeLast24Hours captures enum value "last_24_hours"
	MonitoringCheckMetricDataRangeLast24Hours string = "last_24_hours"

	// MonitoringCheckMetricDataRangeYesterday captures enum value "yesterday"
	MonitoringCheckMetricDataRangeYesterday string = "yesterday"

	// MonitoringCheckMetricDataRangeToday captures enum value "today"
	MonitoringCheckMetricDataRangeToday string = "today"

	// MonitoringCheckMetricDataRangeLast7Days captures enum value "last_7_days"
	MonitoringCheckMetricDataRangeLast7Days string = "last_7_days"

	// MonitoringCheckMetricDataRangeLast30Days captures enum value "last_30_days"
	MonitoringCheckMetricDataRangeLast30Days string = "last_30_days"

	// MonitoringCheckMetricDataRangeThisWeek captures enum value "this_week"
	MonitoringCheckMetricDataRangeThisWeek string = "this_week"

	// MonitoringCheckMetricDataRangeLastWeek captures enum value "last_week"
	MonitoringCheckMetricDataRangeLastWeek string = "last_week"

	// MonitoringCheckMetricDataRangeThisMonth captures enum value "this_month"
	MonitoringCheckMetricDataRangeThisMonth string = "this_month"

	// MonitoringCheckMetricDataRangeMonthToDate captures enum value "month_to_date"
	MonitoringCheckMetricDataRangeMonthToDate string = "month_to_date"

	// MonitoringCheckMetricDataRangeLastMonth captures enum value "last_month"
	MonitoringCheckMetricDataRangeLastMonth string = "last_month"

	// MonitoringCheckMetricDataRangeLast3Months captures enum value "last_3_months"
	MonitoringCheckMetricDataRangeLast3Months string = "last_3_months"

	// MonitoringCheckMetricDataRangeLast6Months captures enum value "last_6_months"
	MonitoringCheckMetricDataRangeLast6Months string = "last_6_months"

	// MonitoringCheckMetricDataRangeLast12Months captures enum value "last_12_months"
	MonitoringCheckMetricDataRangeLast12Months string = "last_12_months"
)

// prop value enum
func (m *MonitoringCheckMetricData) validateRangeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, monitoringCheckMetricDataTypeRangePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MonitoringCheckMetricData) validateRange(formats strfmt.Registry) error {
	if swag.IsZero(m.Range) { // not required
		return nil
	}

	// value enum
	if err := m.validateRangeEnum("range", "body", m.Range); err != nil {
		return err
	}

	return nil
}

func (m *MonitoringCheckMetricData) validateSeries(formats strfmt.Registry) error {

	if err := validate.Required("series", "body", m.Series); err != nil {
		return err
	}

	for i := 0; i < len(m.Series); i++ {
		if swag.IsZero(m.Series[i]) { // not required
			continue
		}

		if m.Series[i] != nil {
			if err := m.Series[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MonitoringCheckMetricData) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	if err := validate.FormatOf("to", "body", "date-time", m.To.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this monitoring check metric data based on the context it is used
func (m *MonitoringCheckMetricData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSeries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoringCheckMetricData) contextValidateSeries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Series); i++ {

		if m.Series[i] != nil {
			if err := m.Series[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("series" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonitoringCheckMetricData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitoringCheckMetricData) UnmarshalBinary(b []byte) error {
	var res MonitoringCheckMetricData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
