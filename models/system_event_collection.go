// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SystemEventCollection A list of system events
//
// swagger:model system_event_collection
type SystemEventCollection struct {

	// The start time for the timeframe (UTC)
	// Required: true
	// Format: date-time
	From *strfmt.DateTime `json:"from"`

	// The predefined timeframe, if provided
	// Enum: [last_hour last_4_hours last_8_hours last_12_hours last_24_hours yesterday today last_7_days last_30_days this_week last_week this_month month_to_date last_month last_3_months last_6_months last_12_months]
	Range string `json:"range,omitempty"`

	// system events
	// Required: true
	SystemEvents []*SystemEvent `json:"system_events"`

	// The end time for the timeframe (UTC)
	// Required: true
	// Format: date-time
	To *strfmt.DateTime `json:"to"`
}

// Validate validates this system event collection
func (m *SystemEventCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemEventCollection) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	if err := validate.FormatOf("from", "body", "date-time", m.From.String(), formats); err != nil {
		return err
	}

	return nil
}

var systemEventCollectionTypeRangePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["last_hour","last_4_hours","last_8_hours","last_12_hours","last_24_hours","yesterday","today","last_7_days","last_30_days","this_week","last_week","this_month","month_to_date","last_month","last_3_months","last_6_months","last_12_months"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		systemEventCollectionTypeRangePropEnum = append(systemEventCollectionTypeRangePropEnum, v)
	}
}

const (

	// SystemEventCollectionRangeLastHour captures enum value "last_hour"
	SystemEventCollectionRangeLastHour string = "last_hour"

	// SystemEventCollectionRangeLast4Hours captures enum value "last_4_hours"
	SystemEventCollectionRangeLast4Hours string = "last_4_hours"

	// SystemEventCollectionRangeLast8Hours captures enum value "last_8_hours"
	SystemEventCollectionRangeLast8Hours string = "last_8_hours"

	// SystemEventCollectionRangeLast12Hours captures enum value "last_12_hours"
	SystemEventCollectionRangeLast12Hours string = "last_12_hours"

	// SystemEventCollectionRangeLast24Hours captures enum value "last_24_hours"
	SystemEventCollectionRangeLast24Hours string = "last_24_hours"

	// SystemEventCollectionRangeYesterday captures enum value "yesterday"
	SystemEventCollectionRangeYesterday string = "yesterday"

	// SystemEventCollectionRangeToday captures enum value "today"
	SystemEventCollectionRangeToday string = "today"

	// SystemEventCollectionRangeLast7Days captures enum value "last_7_days"
	SystemEventCollectionRangeLast7Days string = "last_7_days"

	// SystemEventCollectionRangeLast30Days captures enum value "last_30_days"
	SystemEventCollectionRangeLast30Days string = "last_30_days"

	// SystemEventCollectionRangeThisWeek captures enum value "this_week"
	SystemEventCollectionRangeThisWeek string = "this_week"

	// SystemEventCollectionRangeLastWeek captures enum value "last_week"
	SystemEventCollectionRangeLastWeek string = "last_week"

	// SystemEventCollectionRangeThisMonth captures enum value "this_month"
	SystemEventCollectionRangeThisMonth string = "this_month"

	// SystemEventCollectionRangeMonthToDate captures enum value "month_to_date"
	SystemEventCollectionRangeMonthToDate string = "month_to_date"

	// SystemEventCollectionRangeLastMonth captures enum value "last_month"
	SystemEventCollectionRangeLastMonth string = "last_month"

	// SystemEventCollectionRangeLast3Months captures enum value "last_3_months"
	SystemEventCollectionRangeLast3Months string = "last_3_months"

	// SystemEventCollectionRangeLast6Months captures enum value "last_6_months"
	SystemEventCollectionRangeLast6Months string = "last_6_months"

	// SystemEventCollectionRangeLast12Months captures enum value "last_12_months"
	SystemEventCollectionRangeLast12Months string = "last_12_months"
)

// prop value enum
func (m *SystemEventCollection) validateRangeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, systemEventCollectionTypeRangePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SystemEventCollection) validateRange(formats strfmt.Registry) error {
	if swag.IsZero(m.Range) { // not required
		return nil
	}

	// value enum
	if err := m.validateRangeEnum("range", "body", m.Range); err != nil {
		return err
	}

	return nil
}

func (m *SystemEventCollection) validateSystemEvents(formats strfmt.Registry) error {

	if err := validate.Required("system_events", "body", m.SystemEvents); err != nil {
		return err
	}

	for i := 0; i < len(m.SystemEvents); i++ {
		if swag.IsZero(m.SystemEvents[i]) { // not required
			continue
		}

		if m.SystemEvents[i] != nil {
			if err := m.SystemEvents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("system_events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SystemEventCollection) validateTo(formats strfmt.Registry) error {

	if err := validate.Required("to", "body", m.To); err != nil {
		return err
	}

	if err := validate.FormatOf("to", "body", "date-time", m.To.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this system event collection based on the context it is used
func (m *SystemEventCollection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSystemEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SystemEventCollection) contextValidateSystemEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SystemEvents); i++ {

		if m.SystemEvents[i] != nil {
			if err := m.SystemEvents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("system_events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SystemEventCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SystemEventCollection) UnmarshalBinary(b []byte) error {
	var res SystemEventCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
