// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetricName metric name
//
// swagger:model metric_name
type MetricName struct {

	// The format of the data for this metric.
	// Example: percent
	// Enum: [milliseconds count percent]
	Format string `json:"format,omitempty"`

	// A readable label for the metric, in Title Case.
	// Example: Percentage Uptime
	// Enum: [Mean Response Time Maximum Response Time Minimum Response Time Response Time Standard Deviation Run Count Error Count Percentage Uptime Percentage Downtime SLA Percentage]
	Label string `json:"label,omitempty"`

	// The name of the metric, in snake_case.
	// Example: percentage_uptime
	// Enum: [average_response_time max_response_time min_response_time standard_deviation run_count error_count percentage_uptime percentage_downtime sla_percentage]
	Name string `json:"name,omitempty"`
}

// Validate validates this metric name
func (m *MetricName) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var metricNameTypeFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["milliseconds","count","percent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metricNameTypeFormatPropEnum = append(metricNameTypeFormatPropEnum, v)
	}
}

const (

	// MetricNameFormatMilliseconds captures enum value "milliseconds"
	MetricNameFormatMilliseconds string = "milliseconds"

	// MetricNameFormatCount captures enum value "count"
	MetricNameFormatCount string = "count"

	// MetricNameFormatPercent captures enum value "percent"
	MetricNameFormatPercent string = "percent"
)

// prop value enum
func (m *MetricName) validateFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, metricNameTypeFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MetricName) validateFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.Format) { // not required
		return nil
	}

	// value enum
	if err := m.validateFormatEnum("format", "body", m.Format); err != nil {
		return err
	}

	return nil
}

var metricNameTypeLabelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Mean Response Time","Maximum Response Time","Minimum Response Time","Response Time Standard Deviation","Run Count","Error Count","Percentage Uptime","Percentage Downtime","SLA Percentage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metricNameTypeLabelPropEnum = append(metricNameTypeLabelPropEnum, v)
	}
}

const (

	// MetricNameLabelMeanResponseTime captures enum value "Mean Response Time"
	MetricNameLabelMeanResponseTime string = "Mean Response Time"

	// MetricNameLabelMaximumResponseTime captures enum value "Maximum Response Time"
	MetricNameLabelMaximumResponseTime string = "Maximum Response Time"

	// MetricNameLabelMinimumResponseTime captures enum value "Minimum Response Time"
	MetricNameLabelMinimumResponseTime string = "Minimum Response Time"

	// MetricNameLabelResponseTimeStandardDeviation captures enum value "Response Time Standard Deviation"
	MetricNameLabelResponseTimeStandardDeviation string = "Response Time Standard Deviation"

	// MetricNameLabelRunCount captures enum value "Run Count"
	MetricNameLabelRunCount string = "Run Count"

	// MetricNameLabelErrorCount captures enum value "Error Count"
	MetricNameLabelErrorCount string = "Error Count"

	// MetricNameLabelPercentageUptime captures enum value "Percentage Uptime"
	MetricNameLabelPercentageUptime string = "Percentage Uptime"

	// MetricNameLabelPercentageDowntime captures enum value "Percentage Downtime"
	MetricNameLabelPercentageDowntime string = "Percentage Downtime"

	// MetricNameLabelSLAPercentage captures enum value "SLA Percentage"
	MetricNameLabelSLAPercentage string = "SLA Percentage"
)

// prop value enum
func (m *MetricName) validateLabelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, metricNameTypeLabelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MetricName) validateLabel(formats strfmt.Registry) error {
	if swag.IsZero(m.Label) { // not required
		return nil
	}

	// value enum
	if err := m.validateLabelEnum("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

var metricNameTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["average_response_time","max_response_time","min_response_time","standard_deviation","run_count","error_count","percentage_uptime","percentage_downtime","sla_percentage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metricNameTypeNamePropEnum = append(metricNameTypeNamePropEnum, v)
	}
}

const (

	// MetricNameNameAverageResponseTime captures enum value "average_response_time"
	MetricNameNameAverageResponseTime string = "average_response_time"

	// MetricNameNameMaxResponseTime captures enum value "max_response_time"
	MetricNameNameMaxResponseTime string = "max_response_time"

	// MetricNameNameMinResponseTime captures enum value "min_response_time"
	MetricNameNameMinResponseTime string = "min_response_time"

	// MetricNameNameStandardDeviation captures enum value "standard_deviation"
	MetricNameNameStandardDeviation string = "standard_deviation"

	// MetricNameNameRunCount captures enum value "run_count"
	MetricNameNameRunCount string = "run_count"

	// MetricNameNameErrorCount captures enum value "error_count"
	MetricNameNameErrorCount string = "error_count"

	// MetricNameNamePercentageUptime captures enum value "percentage_uptime"
	MetricNameNamePercentageUptime string = "percentage_uptime"

	// MetricNameNamePercentageDowntime captures enum value "percentage_downtime"
	MetricNameNamePercentageDowntime string = "percentage_downtime"

	// MetricNameNameSLAPercentage captures enum value "sla_percentage"
	MetricNameNameSLAPercentage string = "sla_percentage"
)

// prop value enum
func (m *MetricName) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, metricNameTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MetricName) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	// value enum
	if err := m.validateNameEnum("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this metric name based on context it is used
func (m *MetricName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MetricName) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetricName) UnmarshalBinary(b []byte) error {
	var res MetricName
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
