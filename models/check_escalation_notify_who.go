// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CheckEscalationNotifyWho Where to send escalations
//
// swagger:model check_escalation_notify_who
type CheckEscalationNotifyWho struct {

	// The recipient's email, if notifying a custom email address
	CustomEmail string `json:"custom_email,omitempty"`

	// The id of the user or group
	ID int32 `json:"id,omitempty"`

	// links
	Links *CheckEscalationNotifyWhoLinks `json:"links,omitempty"`

	// The type of recipient. Can be either `user` or `group`.
	Type string `json:"type,omitempty"`
}

// Validate validates this check escalation notify who
func (m *CheckEscalationNotifyWho) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckEscalationNotifyWho) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this check escalation notify who based on the context it is used
func (m *CheckEscalationNotifyWho) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckEscalationNotifyWho) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CheckEscalationNotifyWho) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckEscalationNotifyWho) UnmarshalBinary(b []byte) error {
	var res CheckEscalationNotifyWho
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CheckEscalationNotifyWhoLinks check escalation notify who links
//
// swagger:model CheckEscalationNotifyWhoLinks
type CheckEscalationNotifyWhoLinks struct {

	// The html view for this recipient, if available
	SelfHTML string `json:"self_html,omitempty"`
}

// Validate validates this check escalation notify who links
func (m *CheckEscalationNotifyWhoLinks) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this check escalation notify who links based on context it is used
func (m *CheckEscalationNotifyWhoLinks) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CheckEscalationNotifyWhoLinks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckEscalationNotifyWhoLinks) UnmarshalBinary(b []byte) error {
	var res CheckEscalationNotifyWhoLinks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
