// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ComparisonReport A single Comparison Report
//
// swagger:discriminator comparison_report name
type ComparisonReport interface {
	runtime.Validatable
	runtime.ContextValidatable

	ComparisonReportGeneric()

	checksField()

	// Information about the account that owns the Comparison Report
	Account() *Account
	SetAccount(*Account)

	// An array of Real Browser checks selected for the Comparison Report. Needs to have
	//                                   at least two checks per comparison report
	Checks() []*ComparisonCheck
	SetChecks([]*ComparisonCheck)

	// When the Comparison Report was created (UTC)
	// Example: 2021-05-25T17:54:05Z
	// Format: date-time
	CreatedAt() strfmt.DateTime
	SetCreatedAt(strfmt.DateTime)

	// The unique ID of the Comparison Report
	// Example: 1
	ID() int32
	SetID(int32)

	// An array of location IDs selected for the Comparison Report. If this array is empty,
	//                                   the report will include data from all locations.
	Locations() []*ReportLocation
	SetLocations([]*ReportLocation)

	// A shareable link that can be viewed by anyone
	// Example: https://monitoring.rigor.com/share/64ec88ca00b268e5ba1a35678a1b5316d212f4f366b2477232534a8aeca37f3c*OzE7Mg==
	ShareLink() string
	SetShareLink(string)

	// When the Comparison Report was last updated (UTC)
	// Example: 2021-05-25T17:54:05Z
	// Format: date-time
	UpdatedAt() strfmt.DateTime
	SetUpdatedAt(strfmt.DateTime)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type comparisonReport struct {

	ComparisonReportGeneric

	checksField *[]Check

	// Information about the account that owns the Comparison Report
	Account *Account `json:"account,omitempty"`

	// An array of Real Browser checks selected for the Comparison Report. Needs to have
	//                                   at least two checks per comparison report
	Checks []*ComparisonCheck `json:"checks"`

	// When the Comparison Report was created (UTC)
	// Example: 2021-05-25T17:54:05Z
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// The unique ID of the Comparison Report
	// Example: 1
	ID int32 `json:"id,omitempty"`

	// An array of location IDs selected for the Comparison Report. If this array is empty,
	//                                   the report will include data from all locations.
	Locations []*ReportLocation `json:"locations"`

	// A shareable link that can be viewed by anyone
	// Example: https://monitoring.rigor.com/share/64ec88ca00b268e5ba1a35678a1b5316d212f4f366b2477232534a8aeca37f3c*OzE7Mg==
	ShareLink string `json:"share_link,omitempty"`

	// When the Comparison Report was last updated (UTC)
	// Example: 2021-05-25T17:54:05Z
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`
}

// UnmarshalComparisonReportSlice unmarshals polymorphic slices of ComparisonReport
func UnmarshalComparisonReportSlice(reader io.Reader, consumer runtime.Consumer) ([]ComparisonReport, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ComparisonReport
	for _, element := range elements {
		obj, err := unmarshalComparisonReport(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalComparisonReport unmarshals polymorphic ComparisonReport
func UnmarshalComparisonReport(reader io.Reader, consumer runtime.Consumer) (ComparisonReport, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalComparisonReport(data, consumer)
}

func unmarshalComparisonReport(data []byte, consumer runtime.Consumer) (ComparisonReport, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the name property.
	var getType struct {
		Name string `json:"name"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("name", "body", getType.Name); err != nil {
		return nil, err
	}

	// The value of name is used to determine which type to create and unmarshal the data into
	switch getType.Name {
	case "comparison_report":
		var result comparisonReport
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return nil, nil
	}
	return nil, errors.New(422, "invalid name value: %q", getType.Name)
}

// Validate validates this comparison report
func (m *comparisonReport) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ComparisonReportGeneric
	if err := m.ComparisonReportGeneric.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChecks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *comparisonReport) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.Account) { // not required
		return nil
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *comparisonReport) validateChecks(formats strfmt.Registry) error {

	if swag.IsZero(m.Checks) { // not required
		return nil
	}

	for i := 0; i < len(m.Checks); i++ {
		if swag.IsZero(m.Checks[i]) { // not required
			continue
		}

		if m.Checks[i] != nil {
			if err := m.Checks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *comparisonReport) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *comparisonReport) validateLocations(formats strfmt.Registry) error {

	if swag.IsZero(m.Locations) { // not required
		return nil
	}

	for i := 0; i < len(m.Locations); i++ {
		if swag.IsZero(m.Locations[i]) { // not required
			continue
		}

		if m.Locations[i] != nil {
			if err := m.Locations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("locations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *comparisonReport) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this comparison report based on the context it is used
func (m *comparisonReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ComparisonReportGeneric
	if err := m.ComparisonReportGeneric.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChecks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *comparisonReport) contextValidateAccount(ctx context.Context, formats strfmt.Registry) error {

	if m.Account != nil {
		if err := m.Account.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *comparisonReport) contextValidateChecks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Checks); i++ {

		if m.Checks[i] != nil {
			if err := m.Checks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *comparisonReport) contextValidateLocations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Locations); i++ {

		if m.Locations[i] != nil {
			if err := m.Locations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("locations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}
