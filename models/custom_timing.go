// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomTiming A custom `mark` or `measure`
//
// swagger:model custom_timing
type CustomTiming struct {

	// entry type
	// Example: mark
	// Enum: [mark measure]
	EntryType string `json:"entry_type,omitempty"`

	// The name of this `mark` or `measure`
	// Example: myCustomMark
	Name string `json:"name,omitempty"`

	// For `mark`s, the value is the amount of time in milliseconds between the beginning of the page load and the `startTime` of the `mark`. For `measurement`s, the value is the duration of the `measurement` in milliseconds.
	// Example: 123.4
	Value float64 `json:"value,omitempty"`
}

// Validate validates this custom timing
func (m *CustomTiming) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntryType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var customTimingTypeEntryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["mark","measure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customTimingTypeEntryTypePropEnum = append(customTimingTypeEntryTypePropEnum, v)
	}
}

const (

	// CustomTimingEntryTypeMark captures enum value "mark"
	CustomTimingEntryTypeMark string = "mark"

	// CustomTimingEntryTypeMeasure captures enum value "measure"
	CustomTimingEntryTypeMeasure string = "measure"
)

// prop value enum
func (m *CustomTiming) validateEntryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customTimingTypeEntryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomTiming) validateEntryType(formats strfmt.Registry) error {
	if swag.IsZero(m.EntryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntryTypeEnum("entry_type", "body", m.EntryType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this custom timing based on context it is used
func (m *CustomTiming) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomTiming) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomTiming) UnmarshalBinary(b []byte) error {
	var res CustomTiming
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
