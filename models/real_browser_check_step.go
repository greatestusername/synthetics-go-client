// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RealBrowserCheckStep real browser check step
//
// swagger:model real_browser_check_step
type RealBrowserCheckStep struct {

	// When the step was created (UTC)
	// Example: 2021-05-25T17:54:05Z
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// How to select the value
	// Example: id
	// Enum: [id name xpath css link jspath]
	How string `json:"how,omitempty"`

	// The action to take
	// Example: enter_value
	// Enum: [accept_alert clear_element click_element dismiss_alert enter_value enter_password_value go_to_url run_javascript select_option store_variable_from_element store_variable_from_javascript switch_to_iframe switch_to_main wait_for_text_present wait_for_text_not_present wait_for_element_present wait_for_element_not_present wait_for_element_visible wait_for_element_not_visible]
	ItemMethod string `json:"item_method,omitempty"`

	// A short summary of what this step does
	// Example: Fill in email
	Name string `json:"name,omitempty"`

	// The ordered position of the step (starting with 0)
	// Example: 0
	// Minimum: 0
	Position *int32 `json:"position,omitempty"`

	// When the step was last updated (UTC)
	// Example: 2021-05-25T17:54:05Z
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updated_at,omitempty"`

	// The value to input
	// Example: my_email@example.com
	Value string `json:"value,omitempty"`

	// The variable name to use when saving the return value from a JavaScript step
	VariableName string `json:"variable_name,omitempty"`

	// What to select
	// Example: email-input
	What string `json:"what,omitempty"`
}

// Validate validates this real browser check step
func (m *RealBrowserCheckStep) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RealBrowserCheckStep) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var realBrowserCheckStepTypeHowPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["id","name","xpath","css","link","jspath"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		realBrowserCheckStepTypeHowPropEnum = append(realBrowserCheckStepTypeHowPropEnum, v)
	}
}

const (

	// RealBrowserCheckStepHowID captures enum value "id"
	RealBrowserCheckStepHowID string = "id"

	// RealBrowserCheckStepHowName captures enum value "name"
	RealBrowserCheckStepHowName string = "name"

	// RealBrowserCheckStepHowXpath captures enum value "xpath"
	RealBrowserCheckStepHowXpath string = "xpath"

	// RealBrowserCheckStepHowCSS captures enum value "css"
	RealBrowserCheckStepHowCSS string = "css"

	// RealBrowserCheckStepHowLink captures enum value "link"
	RealBrowserCheckStepHowLink string = "link"

	// RealBrowserCheckStepHowJspath captures enum value "jspath"
	RealBrowserCheckStepHowJspath string = "jspath"
)

// prop value enum
func (m *RealBrowserCheckStep) validateHowEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, realBrowserCheckStepTypeHowPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RealBrowserCheckStep) validateHow(formats strfmt.Registry) error {
	if swag.IsZero(m.How) { // not required
		return nil
	}

	// value enum
	if err := m.validateHowEnum("how", "body", m.How); err != nil {
		return err
	}

	return nil
}

var realBrowserCheckStepTypeItemMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["accept_alert","clear_element","click_element","dismiss_alert","enter_value","enter_password_value","go_to_url","run_javascript","select_option","store_variable_from_element","store_variable_from_javascript","switch_to_iframe","switch_to_main","wait_for_text_present","wait_for_text_not_present","wait_for_element_present","wait_for_element_not_present","wait_for_element_visible","wait_for_element_not_visible"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		realBrowserCheckStepTypeItemMethodPropEnum = append(realBrowserCheckStepTypeItemMethodPropEnum, v)
	}
}

const (

	// RealBrowserCheckStepItemMethodAcceptAlert captures enum value "accept_alert"
	RealBrowserCheckStepItemMethodAcceptAlert string = "accept_alert"

	// RealBrowserCheckStepItemMethodClearElement captures enum value "clear_element"
	RealBrowserCheckStepItemMethodClearElement string = "clear_element"

	// RealBrowserCheckStepItemMethodClickElement captures enum value "click_element"
	RealBrowserCheckStepItemMethodClickElement string = "click_element"

	// RealBrowserCheckStepItemMethodDismissAlert captures enum value "dismiss_alert"
	RealBrowserCheckStepItemMethodDismissAlert string = "dismiss_alert"

	// RealBrowserCheckStepItemMethodEnterValue captures enum value "enter_value"
	RealBrowserCheckStepItemMethodEnterValue string = "enter_value"

	// RealBrowserCheckStepItemMethodEnterPasswordValue captures enum value "enter_password_value"
	RealBrowserCheckStepItemMethodEnterPasswordValue string = "enter_password_value"

	// RealBrowserCheckStepItemMethodGoToURL captures enum value "go_to_url"
	RealBrowserCheckStepItemMethodGoToURL string = "go_to_url"

	// RealBrowserCheckStepItemMethodRunJavascript captures enum value "run_javascript"
	RealBrowserCheckStepItemMethodRunJavascript string = "run_javascript"

	// RealBrowserCheckStepItemMethodSelectOption captures enum value "select_option"
	RealBrowserCheckStepItemMethodSelectOption string = "select_option"

	// RealBrowserCheckStepItemMethodStoreVariableFromElement captures enum value "store_variable_from_element"
	RealBrowserCheckStepItemMethodStoreVariableFromElement string = "store_variable_from_element"

	// RealBrowserCheckStepItemMethodStoreVariableFromJavascript captures enum value "store_variable_from_javascript"
	RealBrowserCheckStepItemMethodStoreVariableFromJavascript string = "store_variable_from_javascript"

	// RealBrowserCheckStepItemMethodSwitchToIframe captures enum value "switch_to_iframe"
	RealBrowserCheckStepItemMethodSwitchToIframe string = "switch_to_iframe"

	// RealBrowserCheckStepItemMethodSwitchToMain captures enum value "switch_to_main"
	RealBrowserCheckStepItemMethodSwitchToMain string = "switch_to_main"

	// RealBrowserCheckStepItemMethodWaitForTextPresent captures enum value "wait_for_text_present"
	RealBrowserCheckStepItemMethodWaitForTextPresent string = "wait_for_text_present"

	// RealBrowserCheckStepItemMethodWaitForTextNotPresent captures enum value "wait_for_text_not_present"
	RealBrowserCheckStepItemMethodWaitForTextNotPresent string = "wait_for_text_not_present"

	// RealBrowserCheckStepItemMethodWaitForElementPresent captures enum value "wait_for_element_present"
	RealBrowserCheckStepItemMethodWaitForElementPresent string = "wait_for_element_present"

	// RealBrowserCheckStepItemMethodWaitForElementNotPresent captures enum value "wait_for_element_not_present"
	RealBrowserCheckStepItemMethodWaitForElementNotPresent string = "wait_for_element_not_present"

	// RealBrowserCheckStepItemMethodWaitForElementVisible captures enum value "wait_for_element_visible"
	RealBrowserCheckStepItemMethodWaitForElementVisible string = "wait_for_element_visible"

	// RealBrowserCheckStepItemMethodWaitForElementNotVisible captures enum value "wait_for_element_not_visible"
	RealBrowserCheckStepItemMethodWaitForElementNotVisible string = "wait_for_element_not_visible"
)

// prop value enum
func (m *RealBrowserCheckStep) validateItemMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, realBrowserCheckStepTypeItemMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RealBrowserCheckStep) validateItemMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateItemMethodEnum("item_method", "body", m.ItemMethod); err != nil {
		return err
	}

	return nil
}

func (m *RealBrowserCheckStep) validatePosition(formats strfmt.Registry) error {
	if swag.IsZero(m.Position) { // not required
		return nil
	}

	if err := validate.MinimumInt("position", "body", int64(*m.Position), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *RealBrowserCheckStep) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this real browser check step based on context it is used
func (m *RealBrowserCheckStep) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RealBrowserCheckStep) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RealBrowserCheckStep) UnmarshalBinary(b []byte) error {
	var res RealBrowserCheckStep
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
