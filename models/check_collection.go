// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckCollection A page of Checks
//
// swagger:model check_collection
type CheckCollection struct {
	Checks []CheckCollectionChecksItems0 `json:"checks"`

	// Current page number
	// Example: 2
	CurrentPage int32 `json:"current_page,omitempty"`

	// Next page number (null if none)
	// Example: 3
	NextPage int32 `json:"next_page,omitempty"`

	// Number of results for each page
	// Example: 50
	PerPage int32 `json:"per_page,omitempty"`

	// Previous page number (null if none)
	// Example: 1
	PreviousPage int32 `json:"previous_page,omitempty"`

	// Total number of results across all pages
	// Example: 105
	TotalCount int32 `json:"total_count,omitempty"`

	// Total number of pages
	// Example: 3
	TotalPages int32 `json:"total_pages,omitempty"`
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *CheckCollection) UnmarshalJSON(raw []byte) error {
	var data struct {
		Checks json.RawMessage `json:"checks"`

		// Current page number
		// Example: 2
		CurrentPage int32 `json:"current_page,omitempty"`

		// Next page number (null if none)
		// Example: 3
		NextPage int32 `json:"next_page,omitempty"`

		// Number of results for each page
		// Example: 50
		PerPage int32 `json:"per_page,omitempty"`

		// Previous page number (null if none)
		// Example: 1
		PreviousPage int32 `json:"previous_page,omitempty"`

		// Total number of results across all pages
		// Example: 105
		TotalCount int32 `json:"total_count,omitempty"`

		// Total number of pages
		// Example: 3
		TotalPages int32 `json:"total_pages,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var allOfChecks []CheckCollectionChecksItems0
	if string(data.Checks) != "null" {
		checks, err := UnmarshalCheckCollectionChecksItems0Slice(bytes.NewBuffer(data.Checks), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		allOfChecks = checks
	}

	var result CheckCollection

	result.checksField = allOfChecks

	result.CurrentPage = data.CurrentPage
	result.NextPage = data.NextPage
	result.PerPage = data.PerPage
	result.PreviousPage = data.PreviousPage
	result.TotalCount = data.TotalCount
	result.TotalPages = data.TotalPages

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m CheckCollection) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// Current page number
		// Example: 2
		CurrentPage int32 `json:"current_page,omitempty"`

		// Next page number (null if none)
		// Example: 3
		NextPage int32 `json:"next_page,omitempty"`

		// Number of results for each page
		// Example: 50
		PerPage int32 `json:"per_page,omitempty"`

		// Previous page number (null if none)
		// Example: 1
		PreviousPage int32 `json:"previous_page,omitempty"`

		// Total number of results across all pages
		// Example: 105
		TotalCount int32 `json:"total_count,omitempty"`

		// Total number of pages
		// Example: 3
		TotalPages int32 `json:"total_pages,omitempty"`
	}{

		CurrentPage: m.CurrentPage,

		NextPage: m.NextPage,

		PerPage: m.PerPage,

		PreviousPage: m.PreviousPage,

		TotalCount: m.TotalCount,

		TotalPages: m.TotalPages,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Checks []CheckCollectionChecksItems0 `json:"checks"`
	}{

		Checks: m.Checks(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this check collection
func (m *CheckCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckCollection) validateChecks(formats strfmt.Registry) error {

	if swag.IsZero(m.Checks()) { // not required
		return nil
	}

	for i := 0; i < len(m.Checks()); i++ {

		if err := m.checksField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("checks" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this check collection based on the context it is used
func (m *CheckCollection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChecks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckCollection) contextValidateChecks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Checks()); i++ {

		if err := m.checksField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("checks" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CheckCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckCollection) UnmarshalBinary(b []byte) error {
	var res CheckCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CheckCollectionChecksItems0 A single check
//
// swagger:discriminator CheckCollectionChecksItems0
type CheckCollectionChecksItems0 interface {
	runtime.Validatable
	runtime.ContextValidatable

	// When the check was created (UTC)
	// Example: 2021-05-25T17:54:05Z
	// Format: date-time
	CreatedAt() strfmt.DateTime
	SetCreatedAt(strfmt.DateTime)

	// Run the check at this interval (in minutes)
	// Example: 5
	Frequency() int64
	SetFrequency(int64)

	// The unique ID for the check
	// Example: 1
	// Required: true
	ID() *int32
	SetID(*int32)

	// links
	Links() *CheckCollectionChecksItems0Links
	SetLinks(*CheckCollectionChecksItems0Links)

	// If notifications for this check are muted or not
	// Example: false
	Muted() bool
	SetMuted(bool)

	// The unique name for the check
	// Example: Example Check
	Name() string
	SetName(string)

	// If the check is paused or not
	// Example: false
	Paused() bool
	SetPaused(bool)

	// status
	Status() *CheckCollectionChecksItems0Status
	SetStatus(*CheckCollectionChecksItems0Status)

	// An array of tags applied to the check
	Tags() []*CheckCollectionChecksItems0TagsItems0
	SetTags([]*CheckCollectionChecksItems0TagsItems0)

	// The check type
	// Required: true
	// Enum: [http http_multi_step port real_browser benchmark content uptime monitoring api]
	Type() string
	SetType(string)

	// When the check was last updated (UTC)
	// Example: 2021-05-25T17:54:05Z
	// Format: date-time
	UpdatedAt() strfmt.DateTime
	SetUpdatedAt(strfmt.DateTime)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type checkCollectionChecksItems0 struct {
	createdAtField strfmt.DateTime

	frequencyField int64

	idField *int32

	linksField *CheckCollectionChecksItems0Links

	mutedField bool

	nameField string

	pausedField bool

	statusField *CheckCollectionChecksItems0Status

	tagsField []*CheckCollectionChecksItems0TagsItems0

	typeField string

	updatedAtField strfmt.DateTime
}

// CreatedAt gets the created at of this polymorphic type
func (m *checkCollectionChecksItems0) CreatedAt() strfmt.DateTime {
	return m.createdAtField
}

// SetCreatedAt sets the created at of this polymorphic type
func (m *checkCollectionChecksItems0) SetCreatedAt(val strfmt.DateTime) {
	m.createdAtField = val
}

// Frequency gets the frequency of this polymorphic type
func (m *checkCollectionChecksItems0) Frequency() int64 {
	return m.frequencyField
}

// SetFrequency sets the frequency of this polymorphic type
func (m *checkCollectionChecksItems0) SetFrequency(val int64) {
	m.frequencyField = val
}

// ID gets the id of this polymorphic type
func (m *checkCollectionChecksItems0) ID() *int32 {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *checkCollectionChecksItems0) SetID(val *int32) {
	m.idField = val
}

// Links gets the links of this polymorphic type
func (m *checkCollectionChecksItems0) Links() *CheckCollectionChecksItems0Links {
	return m.linksField
}

// SetLinks sets the links of this polymorphic type
func (m *checkCollectionChecksItems0) SetLinks(val *CheckCollectionChecksItems0Links) {
	m.linksField = val
}

// Muted gets the muted of this polymorphic type
func (m *checkCollectionChecksItems0) Muted() bool {
	return m.mutedField
}

// SetMuted sets the muted of this polymorphic type
func (m *checkCollectionChecksItems0) SetMuted(val bool) {
	m.mutedField = val
}

// Name gets the name of this polymorphic type
func (m *checkCollectionChecksItems0) Name() string {
	return m.nameField
}

// SetName sets the name of this polymorphic type
func (m *checkCollectionChecksItems0) SetName(val string) {
	m.nameField = val
}

// Paused gets the paused of this polymorphic type
func (m *checkCollectionChecksItems0) Paused() bool {
	return m.pausedField
}

// SetPaused sets the paused of this polymorphic type
func (m *checkCollectionChecksItems0) SetPaused(val bool) {
	m.pausedField = val
}

// Status gets the status of this polymorphic type
func (m *checkCollectionChecksItems0) Status() *CheckCollectionChecksItems0Status {
	return m.statusField
}

// SetStatus sets the status of this polymorphic type
func (m *checkCollectionChecksItems0) SetStatus(val *CheckCollectionChecksItems0Status) {
	m.statusField = val
}

// Tags gets the tags of this polymorphic type
func (m *checkCollectionChecksItems0) Tags() []*CheckCollectionChecksItems0TagsItems0 {
	return m.tagsField
}

// SetTags sets the tags of this polymorphic type
func (m *checkCollectionChecksItems0) SetTags(val []*CheckCollectionChecksItems0TagsItems0) {
	m.tagsField = val
}

// Type gets the type of this polymorphic type
func (m *checkCollectionChecksItems0) Type() string {
	return m.typeField
}

// SetType sets the type of this polymorphic type
func (m *checkCollectionChecksItems0) SetType(val string) {
	m.typeField = val
}

// UpdatedAt gets the updated at of this polymorphic type
func (m *checkCollectionChecksItems0) UpdatedAt() strfmt.DateTime {
	return m.updatedAtField
}

// SetUpdatedAt sets the updated at of this polymorphic type
func (m *checkCollectionChecksItems0) SetUpdatedAt(val strfmt.DateTime) {
	m.updatedAtField = val
}

// UnmarshalCheckCollectionChecksItems0Slice unmarshals polymorphic slices of CheckCollectionChecksItems0
func UnmarshalCheckCollectionChecksItems0Slice(reader io.Reader, consumer runtime.Consumer) ([]CheckCollectionChecksItems0, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []CheckCollectionChecksItems0
	for _, element := range elements {
		obj, err := unmarshalCheckCollectionChecksItems0(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalCheckCollectionChecksItems0 unmarshals polymorphic CheckCollectionChecksItems0
func UnmarshalCheckCollectionChecksItems0(reader io.Reader, consumer runtime.Consumer) (CheckCollectionChecksItems0, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalCheckCollectionChecksItems0(data, consumer)
}

func unmarshalCheckCollectionChecksItems0(data []byte, consumer runtime.Consumer) (CheckCollectionChecksItems0, error) {
	buf := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the  property.
	var getType struct {
		Empty string `json:""`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("", "body", getType.Empty); err != nil {
		return nil, err
	}

	// The value of  is used to determine which type to create and unmarshal the data into
	switch getType.Empty {
	}
	return nil, errors.New(422, "invalid  value: %q", getType.Empty)
}

// Validate validates this check collection checks items0
func (m *CheckCollectionChecksItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckCollectionChecksItems0) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CheckCollectionChecksItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CheckCollectionChecksItems0) validateLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.Links) { // not required
		return nil
	}

	if m.Links != nil {
		if err := m.Links.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *CheckCollectionChecksItems0) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *CheckCollectionChecksItems0) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var checkCollectionChecksItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["http","http_multi_step","port","real_browser","benchmark","content","uptime","monitoring","api"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		checkCollectionChecksItems0TypeTypePropEnum = append(checkCollectionChecksItems0TypeTypePropEnum, v)
	}
}

const (

	// CheckCollectionChecksItems0TypeHTTP captures enum value "http"
	CheckCollectionChecksItems0TypeHTTP string = "http"

	// CheckCollectionChecksItems0TypeHTTPMultiStep captures enum value "http_multi_step"
	CheckCollectionChecksItems0TypeHTTPMultiStep string = "http_multi_step"

	// CheckCollectionChecksItems0TypePort captures enum value "port"
	CheckCollectionChecksItems0TypePort string = "port"

	// CheckCollectionChecksItems0TypeRealBrowser captures enum value "real_browser"
	CheckCollectionChecksItems0TypeRealBrowser string = "real_browser"

	// CheckCollectionChecksItems0TypeBenchmark captures enum value "benchmark"
	CheckCollectionChecksItems0TypeBenchmark string = "benchmark"

	// CheckCollectionChecksItems0TypeContent captures enum value "content"
	CheckCollectionChecksItems0TypeContent string = "content"

	// CheckCollectionChecksItems0TypeUptime captures enum value "uptime"
	CheckCollectionChecksItems0TypeUptime string = "uptime"

	// CheckCollectionChecksItems0TypeMonitoring captures enum value "monitoring"
	CheckCollectionChecksItems0TypeMonitoring string = "monitoring"

	// CheckCollectionChecksItems0TypeAPI captures enum value "api"
	CheckCollectionChecksItems0TypeAPI string = "api"
)

// prop value enum
func (m *CheckCollectionChecksItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, checkCollectionChecksItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CheckCollectionChecksItems0) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *CheckCollectionChecksItems0) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this check collection checks items0 based on the context it is used
func (m *CheckCollectionChecksItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckCollectionChecksItems0) contextValidateLinks(ctx context.Context, formats strfmt.Registry) error {

	if m.Links != nil {
		if err := m.Links.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("links")
			}
			return err
		}
	}

	return nil
}

func (m *CheckCollectionChecksItems0) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *CheckCollectionChecksItems0) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// CheckCollectionChecksItems0Links check collection checks items0 links
//
// swagger:model CheckCollectionChecksItems0Links
type CheckCollectionChecksItems0Links struct {

	// The URL for the last run of this check
	// Example: https://monitoring.rigor.com/checks/1/runs/1
	LastRun string `json:"last_run,omitempty"`

	// The URL for the available metrics for this check
	// Example: https://monitoring-api.rigor.com/v2/checks/1/metrics
	Metrics string `json:"metrics,omitempty"`

	// The URL for the check detail
	// Example: https://monitoring-api.rigor.com/v2/checks/1
	Self string `json:"self,omitempty"`

	// The URL for the HTML view for this check
	// Example: https://monitoring.rigor.com/checks/http/1
	SelfHTML string `json:"self_html,omitempty"`
}

// Validate validates this check collection checks items0 links
func (m *CheckCollectionChecksItems0Links) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this check collection checks items0 links based on context it is used
func (m *CheckCollectionChecksItems0Links) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CheckCollectionChecksItems0Links) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckCollectionChecksItems0Links) UnmarshalBinary(b []byte) error {
	var res CheckCollectionChecksItems0Links
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CheckCollectionChecksItems0Status check collection checks items0 status
//
// swagger:model CheckCollectionChecksItems0Status
type CheckCollectionChecksItems0Status struct {

	// True if the fail limit has been reached
	// Example: false
	HasFailure bool `json:"has_failure,omitempty"`

	// True if the fail limit has been reached for at least one location
	// Example: false
	HasLocationFailure string `json:"has_location_failure,omitempty"`

	// The timestamp of the last alert (UTC)
	// Example: 2021-05-24T17:54:05Z
	// Format: date-time
	LastAlertAt strfmt.DateTime `json:"last_alert_at,omitempty"`

	// The response code from the last run
	// Example: 200
	LastCode int32 `json:"last_code,omitempty"`

	// The timestamp of the last failed run (UTC)
	// Example: 2021-05-24T17:54:05Z
	// Format: date-time
	LastFailureAt strfmt.DateTime `json:"last_failure_at,omitempty"`

	// The message from the last run
	// Example: OK
	LastMessage string `json:"last_message,omitempty"`

	// The response time from the last run
	// Example: 50
	LastResponseTime string `json:"last_response_time,omitempty"`

	// The timestamp of the last run (UTC)
	// Example: 2021-05-25T17:49:05Z
	// Format: date-time
	LastRunAt strfmt.DateTime `json:"last_run_at,omitempty"`
}

// Validate validates this check collection checks items0 status
func (m *CheckCollectionChecksItems0Status) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastAlertAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastFailureAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastRunAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckCollectionChecksItems0Status) validateLastAlertAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastAlertAt) { // not required
		return nil
	}

	if err := validate.FormatOf("status"+"."+"last_alert_at", "body", "date-time", m.LastAlertAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CheckCollectionChecksItems0Status) validateLastFailureAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastFailureAt) { // not required
		return nil
	}

	if err := validate.FormatOf("status"+"."+"last_failure_at", "body", "date-time", m.LastFailureAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CheckCollectionChecksItems0Status) validateLastRunAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastRunAt) { // not required
		return nil
	}

	if err := validate.FormatOf("status"+"."+"last_run_at", "body", "date-time", m.LastRunAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this check collection checks items0 status based on context it is used
func (m *CheckCollectionChecksItems0Status) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CheckCollectionChecksItems0Status) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckCollectionChecksItems0Status) UnmarshalBinary(b []byte) error {
	var res CheckCollectionChecksItems0Status
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CheckCollectionChecksItems0TagsItems0 check collection checks items0 tags items0
//
// swagger:model CheckCollectionChecksItems0TagsItems0
type CheckCollectionChecksItems0TagsItems0 struct {

	// id
	// Example: 1
	ID int32 `json:"id,omitempty"`

	// name
	// Example: example tag
	Name string `json:"name,omitempty"`
}

// Validate validates this check collection checks items0 tags items0
func (m *CheckCollectionChecksItems0TagsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this check collection checks items0 tags items0 based on context it is used
func (m *CheckCollectionChecksItems0TagsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CheckCollectionChecksItems0TagsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckCollectionChecksItems0TagsItems0) UnmarshalBinary(b []byte) error {
	var res CheckCollectionChecksItems0TagsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
