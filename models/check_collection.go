// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CheckCollection A page of Checks
//
// swagger:model check_collection
type CheckCollection struct {
	Checks []Check `json:"checks"`

	Pagination
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *CheckCollection) UnmarshalJSON(raw []byte) error {
	var data struct {
		Checks json.RawMessage `json:"checks"`

		Pagination
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var allOfChecks []Check
	if string(data.Checks) != "null" {
		checks, err := UnmarshalCheckSlice(bytes.NewBuffer(data.Checks), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		allOfChecks = checks
	}

	var result CheckCollection

	result.Checks = allOfChecks
	result.Pagination = data.Pagination

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m CheckCollection) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		Pagination
	}{

		Pagination: m.Pagination,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Checks []Check `json:"checks"`
	}{

		Checks: m.Checks,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this check collection
func (m *CheckCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecks(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with Pagination
	if err := m.Pagination.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckCollection) validateChecks(formats strfmt.Registry) error {

	if swag.IsZero(m.Checks) { // not required
		return nil
	}

	for i := 0; i < len(m.Checks); i++ {

		if err := m.Checks[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("checks" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this check collection based on the context it is used
func (m *CheckCollection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChecks(ctx, formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with Pagination
	if err := m.Pagination.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckCollection) contextValidateChecks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Checks); i++ {

		if err := m.Checks[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("checks" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CheckCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckCollection) UnmarshalBinary(b []byte) error {
	var res CheckCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
