// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SeleniumSideTest A Selenium SIDE test representing a single check.
//
// swagger:model selenium_side_test
type SeleniumSideTest struct {

	// commands
	Commands []*SeleniumSideTestCommandsItems0 `json:"commands"`

	// The check ID
	// Example: 1
	ID string `json:"id,omitempty"`

	// The check name
	// Example: Example Check
	Name string `json:"name,omitempty"`

	// The starting URL
	// Example: https://example.com
	URL string `json:"url,omitempty"`
}

// Validate validates this selenium side test
func (m *SeleniumSideTest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommands(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SeleniumSideTest) validateCommands(formats strfmt.Registry) error {
	if swag.IsZero(m.Commands) { // not required
		return nil
	}

	for i := 0; i < len(m.Commands); i++ {
		if swag.IsZero(m.Commands[i]) { // not required
			continue
		}

		if m.Commands[i] != nil {
			if err := m.Commands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this selenium side test based on the context it is used
func (m *SeleniumSideTest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommands(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SeleniumSideTest) contextValidateCommands(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Commands); i++ {

		if m.Commands[i] != nil {
			if err := m.Commands[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SeleniumSideTest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SeleniumSideTest) UnmarshalBinary(b []byte) error {
	var res SeleniumSideTest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SeleniumSideTestCommandsItems0 selenium side test commands items0
//
// swagger:model SeleniumSideTestCommandsItems0
type SeleniumSideTestCommandsItems0 struct {

	// command
	// Example: open
	Command string `json:"command,omitempty"`

	// The step name
	// Example: Open the first page
	Comment string `json:"comment,omitempty"`

	// target
	// Example: /path/to/follow
	Target string `json:"target,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this selenium side test commands items0
func (m *SeleniumSideTestCommandsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this selenium side test commands items0 based on context it is used
func (m *SeleniumSideTestCommandsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SeleniumSideTestCommandsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SeleniumSideTestCommandsItems0) UnmarshalBinary(b []byte) error {
	var res SeleniumSideTestCommandsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
