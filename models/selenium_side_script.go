// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SeleniumSideScript A Selenium SIDE script. This can be run using the Selenium IDE.
//
// swagger:model selenium_side_script
type SeleniumSideScript struct {

	// name
	// Example: Example Check
	Name string `json:"name,omitempty"`

	// suites
	Suites []*SeleniumSideScriptSuitesItems0 `json:"suites"`

	// tests
	Tests []*SeleniumSideScriptTestsItems0 `json:"tests"`

	// url
	// Example: https://example.com
	URL string `json:"url,omitempty"`

	// urls
	Urls []string `json:"urls"`

	// version
	// Example: 1.1
	Version string `json:"version,omitempty"`
}

// Validate validates this selenium side script
func (m *SeleniumSideScript) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSuites(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTests(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SeleniumSideScript) validateSuites(formats strfmt.Registry) error {
	if swag.IsZero(m.Suites) { // not required
		return nil
	}

	for i := 0; i < len(m.Suites); i++ {
		if swag.IsZero(m.Suites[i]) { // not required
			continue
		}

		if m.Suites[i] != nil {
			if err := m.Suites[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("suites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SeleniumSideScript) validateTests(formats strfmt.Registry) error {
	if swag.IsZero(m.Tests) { // not required
		return nil
	}

	for i := 0; i < len(m.Tests); i++ {
		if swag.IsZero(m.Tests[i]) { // not required
			continue
		}

		if m.Tests[i] != nil {
			if err := m.Tests[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this selenium side script based on the context it is used
func (m *SeleniumSideScript) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSuites(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTests(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SeleniumSideScript) contextValidateSuites(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Suites); i++ {

		if m.Suites[i] != nil {
			if err := m.Suites[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("suites" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SeleniumSideScript) contextValidateTests(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tests); i++ {

		if m.Tests[i] != nil {
			if err := m.Tests[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tests" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SeleniumSideScript) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SeleniumSideScript) UnmarshalBinary(b []byte) error {
	var res SeleniumSideScript
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SeleniumSideScriptSuitesItems0 selenium side script suites items0
//
// swagger:model SeleniumSideScriptSuitesItems0
type SeleniumSideScriptSuitesItems0 struct {

	// name
	// Example: Example Check
	Name string `json:"name,omitempty"`

	// An array of test IDs
	Tests []string `json:"tests"`
}

// Validate validates this selenium side script suites items0
func (m *SeleniumSideScriptSuitesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this selenium side script suites items0 based on context it is used
func (m *SeleniumSideScriptSuitesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SeleniumSideScriptSuitesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SeleniumSideScriptSuitesItems0) UnmarshalBinary(b []byte) error {
	var res SeleniumSideScriptSuitesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SeleniumSideScriptTestsItems0 A Selenium SIDE test representing a single check.
//
// swagger:model SeleniumSideScriptTestsItems0
type SeleniumSideScriptTestsItems0 struct {

	// commands
	Commands []*SeleniumSideScriptTestsItems0CommandsItems0 `json:"commands"`

	// The check ID
	// Example: 1
	ID string `json:"id,omitempty"`

	// The check name
	// Example: Example Check
	Name string `json:"name,omitempty"`

	// The starting URL
	// Example: https://example.com
	URL string `json:"url,omitempty"`
}

// Validate validates this selenium side script tests items0
func (m *SeleniumSideScriptTestsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommands(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SeleniumSideScriptTestsItems0) validateCommands(formats strfmt.Registry) error {
	if swag.IsZero(m.Commands) { // not required
		return nil
	}

	for i := 0; i < len(m.Commands); i++ {
		if swag.IsZero(m.Commands[i]) { // not required
			continue
		}

		if m.Commands[i] != nil {
			if err := m.Commands[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this selenium side script tests items0 based on the context it is used
func (m *SeleniumSideScriptTestsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommands(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SeleniumSideScriptTestsItems0) contextValidateCommands(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Commands); i++ {

		if m.Commands[i] != nil {
			if err := m.Commands[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("commands" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SeleniumSideScriptTestsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SeleniumSideScriptTestsItems0) UnmarshalBinary(b []byte) error {
	var res SeleniumSideScriptTestsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SeleniumSideScriptTestsItems0CommandsItems0 selenium side script tests items0 commands items0
//
// swagger:model SeleniumSideScriptTestsItems0CommandsItems0
type SeleniumSideScriptTestsItems0CommandsItems0 struct {

	// command
	// Example: open
	Command string `json:"command,omitempty"`

	// The step name
	// Example: Open the first page
	Comment string `json:"comment,omitempty"`

	// target
	// Example: /path/to/follow
	Target string `json:"target,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this selenium side script tests items0 commands items0
func (m *SeleniumSideScriptTestsItems0CommandsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this selenium side script tests items0 commands items0 based on context it is used
func (m *SeleniumSideScriptTestsItems0CommandsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SeleniumSideScriptTestsItems0CommandsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SeleniumSideScriptTestsItems0CommandsItems0) UnmarshalBinary(b []byte) error {
	var res SeleniumSideScriptTestsItems0CommandsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
