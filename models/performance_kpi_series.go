// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformanceKpiSeries performance kpi series
//
// swagger:model performance_kpi_series
type PerformanceKpiSeries struct {

	// The country for this series (if grouping by `country` or `location`).
	// Example: United States
	Country string `json:"country,omitempty"`

	// An array of data points for this series
	// Min Items: 1
	Data []*PerformanceKpiSeriesData `json:"data"`

	// The location for this series (if grouping by `location`).
	// Example: N. Virginia
	Location string `json:"location,omitempty"`

	// The page position for this series (if grouping by `page`). Page positions begin at 0 and increment with each new page load. For example, if the check visits three pages, the first page will return position `0`, the second page will return position `1`, and the third page will return position `2`.
	// Example: 0
	Position int32 `json:"position,omitempty"`

	// The country for this series (if grouping by `world_region`, `country` or `location`).
	// Example: North America
	WorldRegion string `json:"world_region,omitempty"`
}

// Validate validates this performance kpi series
func (m *PerformanceKpiSeries) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceKpiSeries) validateData(formats strfmt.Registry) error {
	if swag.IsZero(m.Data) { // not required
		return nil
	}

	iDataSize := int64(len(m.Data))

	if err := validate.MinItems("data", "body", iDataSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Data); i++ {
		if swag.IsZero(m.Data[i]) { // not required
			continue
		}

		if m.Data[i] != nil {
			if err := m.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this performance kpi series based on the context it is used
func (m *PerformanceKpiSeries) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformanceKpiSeries) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Data); i++ {

		if m.Data[i] != nil {
			if err := m.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformanceKpiSeries) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformanceKpiSeries) UnmarshalBinary(b []byte) error {
	var res PerformanceKpiSeries
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
